// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
var Control_Alternative = require("Control.Alternative");
var Control_Arrow = require("Control.Arrow");
var Control_Bind = require("Control.Bind");
var Control_Lazy = require("Control.Lazy");
var Control_MonadPlus = require("Control.MonadPlus");
var Control_Plus = require("Control.Plus");
var Control_Monad_Eff_Class = require("Control.Monad.Eff.Class");
var Data_Array = require("Data.Array");
var Data_List = require("Data.List");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");
var Data_Profunctor = require("Data.Profunctor");
var Data_Profunctor_Strong = require("Data.Profunctor.Strong");
var Data_Tuple = require("Data.Tuple");
var MealyT = function (x) {
    return x;
};
var Emit = (function () {
    function Emit(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Emit.create = function (value0) {
        return function (value1) {
            return new Emit(value0, value1);
        };
    };
    return Emit;
})();
var Halt = (function () {
    function Halt() {

    };
    Halt.value = new Halt();
    return Halt;
})();
var stepMealy = function (dictMonad) {
    return function (s) {
        return function (v) {
            return Control_Bind.join(dictMonad["__superclass_Prelude.Bind_1"]())(Prelude["<*>"]((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())(v)(Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(s)));
        };
    };
};
var runMealyT = function (v) {
    return v;
};
var runMealy = function (dictMonad) {
    return function (m) {
        var f = function (v) {
            if (v instanceof Halt) {
                return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(Prelude.unit);
            };
            if (v instanceof Emit) {
                return runMealy(dictMonad)(v.value1);
            };
            throw new Error("Failed pattern match at Data.Machine.Mealy line 65, column 23 - line 66, column 23: " + [ v.constructor.name ]);
        };
        return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(stepMealy(dictMonad)(Prelude.unit)(m))(f);
    };
};
var pureMealy = function (dictApplicative) {
    return function (f) {
        return MealyT(Prelude.pure(dictApplicative)(function (s) {
            return Prelude.pure(dictApplicative)(f(s));
        }));
    };
};
var mealy = function (dictApplicative) {
    return function (f) {
        return MealyT(Prelude.pure(dictApplicative)(f));
    };
};
var profunctorMealy = function (dictMonad) {
    return new Data_Profunctor.Profunctor(function (l) {
        return function (r) {
            var remap = function (m) {
                var g = function (v) {
                    if (v instanceof Emit) {
                        return new Emit(r(v.value0), remap(v.value1));
                    };
                    if (v instanceof Halt) {
                        return Halt.value;
                    };
                    throw new Error("Failed pattern match at Data.Machine.Mealy line 172, column 17 - line 173, column 17: " + [ v.constructor.name ]);
                };
                return mealy(dictMonad["__superclass_Prelude.Applicative_0"]())(function (s) {
                    return Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(g)(stepMealy(dictMonad)(l(s))(m));
                });
            };
            return remap;
        };
    });
};
var scanl = function (dictMonad) {
    return function (f) {
        var go = function (b) {
            return function (m) {
                return mealy(dictMonad["__superclass_Prelude.Applicative_0"]())(function (s) {
                    var g = function (v) {
                        if (v instanceof Halt) {
                            return Halt.value;
                        };
                        if (v instanceof Emit) {
                            var b__ALT = f(b)(v.value0);
                            return new Emit(b__ALT, go(b__ALT)(v.value1));
                        };
                        throw new Error("Failed pattern match at Data.Machine.Mealy line 106, column 33 - line 107, column 33: " + [ v.constructor.name ]);
                    };
                    return Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(g)(stepMealy(dictMonad)(s)(m));
                });
            };
        };
        return go;
    };
};
var semigroupMealy = function (dictMonad) {
    return new Prelude.Semigroup(function (l) {
        return function (r) {
            return mealy(dictMonad["__superclass_Prelude.Applicative_0"]())(function (s) {
                var g = function (v) {
                    if (v instanceof Emit) {
                        return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new Emit(v.value0, Prelude["<>"](semigroupMealy(dictMonad))(v.value1)(r)));
                    };
                    if (v instanceof Halt) {
                        return stepMealy(dictMonad)(s)(r);
                    };
                    throw new Error("Failed pattern match at Data.Machine.Mealy line 184, column 35 - line 185, column 35: " + [ v.constructor.name ]);
                };
                return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(stepMealy(dictMonad)(s)(l))(g);
            });
        };
    });
};
var monoidMealy = function (dictMonad) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMealy(dictMonad);
    }, mealy(dictMonad["__superclass_Prelude.Applicative_0"]())(function (s) {
        return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(Halt.value);
    }));
};
var semigroupoidMealy = function (dictMonad) {
    return new Prelude.Semigroupoid(function (f) {
        return function (g) {
            var gb = function (v) {
                if (v instanceof Halt) {
                    return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(Halt.value);
                };
                if (v instanceof Emit) {
                    var fc = function (v1) {
                        if (v1 instanceof Emit) {
                            return new Emit(v1.value0, Prelude["<<<"](semigroupoidMealy(dictMonad))(v1.value1)(v.value1));
                        };
                        if (v1 instanceof Halt) {
                            return Halt.value;
                        };
                        throw new Error("Failed pattern match at Data.Machine.Mealy line 197, column 13 - line 198, column 13: " + [ v1.constructor.name ]);
                    };
                    return Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(fc)(stepMealy(dictMonad)(v.value0)(f));
                };
                throw new Error("Failed pattern match at Data.Machine.Mealy line 194, column 11 - line 195, column 11: " + [ v.constructor.name ]);
            };
            return mealy(dictMonad["__superclass_Prelude.Applicative_0"]())(function (b) {
                return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(stepMealy(dictMonad)(b)(g))(gb);
            });
        };
    });
};
var sink = function (dictMonad) {
    return function (f) {
        return mealy(dictMonad["__superclass_Prelude.Applicative_0"]())(function (a) {
            return Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude["const"](new Emit(Prelude.unit, sink(dictMonad)(f))))(f(a));
        });
    };
};
var source = function (dictMonad) {
    return function (src) {
        return mealy(dictMonad["__superclass_Prelude.Applicative_0"]())(function (v) {
            return Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude.flip(Emit.create)(source(dictMonad)(src)))(src);
        });
    };
};
var strongMealy = function (dictMonad) {
    return new Data_Profunctor_Strong.Strong(function () {
        return profunctorMealy(dictMonad);
    }, function (m) {
        return mealy(dictMonad["__superclass_Prelude.Applicative_0"]())(function (s) {
            var d = Data_Tuple.snd(s);
            var g = function (v) {
                if (v instanceof Emit) {
                    return new Emit(new Data_Tuple.Tuple(v.value0, d), Data_Profunctor_Strong.first(strongMealy(dictMonad))(v.value1));
                };
                if (v instanceof Halt) {
                    return Halt.value;
                };
                throw new Error("Failed pattern match: " + [ v.constructor.name ]);
            };
            var b = Data_Tuple.fst(s);
            return Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(g)(stepMealy(dictMonad)(b)(m));
        });
    }, function ($136) {
        return Data_Profunctor.dimap(profunctorMealy(dictMonad))(Data_Tuple.swap)(Data_Tuple.swap)(Data_Profunctor_Strong.first(strongMealy(dictMonad))($136));
    });
};
var loop = function (dictMonad) {
    return function (m) {
        var loop__ALT = function (m1) {
            return mealy(dictMonad["__superclass_Prelude.Applicative_0"]())(function (s) {
                var f = function (v) {
                    if (v instanceof Halt) {
                        return stepMealy(dictMonad)(s)(loop(dictMonad)(m));
                    };
                    if (v instanceof Emit) {
                        return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new Emit(v.value0, loop__ALT(v.value1)));
                    };
                    throw new Error("Failed pattern match at Data.Machine.Mealy line 95, column 37 - line 96, column 37: " + [ v.constructor.name ]);
                };
                return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(stepMealy(dictMonad)(s)(m1))(f);
            });
        };
        return loop__ALT(m);
    };
};
var lazyMealy = function (dictMonad) {
    return new Control_Lazy.Lazy(function (f) {
        return mealy(dictMonad["__superclass_Prelude.Applicative_0"]())(function (s) {
            return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(runMealyT(f(Prelude.unit)))(function (v) {
                return v(s);
            });
        });
    });
};
var interleave = function (dictMonad) {
    return function (m1) {
        return function (m2) {
            return mealy(dictMonad["__superclass_Prelude.Applicative_0"]())(function (s) {
                var f = function (v) {
                    if (v instanceof Halt) {
                        return stepMealy(dictMonad)(s)(m2);
                    };
                    if (v instanceof Emit) {
                        return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new Emit(v.value0, interleave(dictMonad)(m2)(v.value1)));
                    };
                    throw new Error("Failed pattern match at Data.Machine.Mealy line 136, column 39 - line 137, column 39: " + [ v.constructor.name ]);
                };
                return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(stepMealy(dictMonad)(s)(m1))(f);
            });
        };
    };
};
var ifte = function (dictMonad) {
    return function (ma) {
        return function (f) {
            return function (mb) {
                return mealy(dictMonad["__superclass_Prelude.Applicative_0"]())(function (s) {
                    var h = function (ma1) {
                        return function (v) {
                            if (v instanceof Halt) {
                                return Halt.value;
                            };
                            if (v instanceof Emit) {
                                return new Emit(v.value0, Prelude["<>"](semigroupMealy(dictMonad))(v.value1)(ifte(dictMonad)(ma1)(f)(mb)));
                            };
                            throw new Error("Failed pattern match at Data.Machine.Mealy line 144, column 35 - line 145, column 35: " + [ ma1.constructor.name, v.constructor.name ]);
                        };
                    };
                    var g = function (v) {
                        if (v instanceof Halt) {
                            return stepMealy(dictMonad)(s)(mb);
                        };
                        if (v instanceof Emit) {
                            return Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(h(v.value1))(stepMealy(dictMonad)(s)(f(v.value0)));
                        };
                        throw new Error("Failed pattern match: " + [ v.constructor.name ]);
                    };
                    return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(stepMealy(dictMonad)(s)(ma))(g);
                });
            };
        };
    };
};
var halt = function (dictApplicative) {
    return pureMealy(dictApplicative)(Prelude["const"](Halt.value));
};
var msplit = function (dictMonad) {
    return function (m) {
        var f = function (v) {
            if (v instanceof Halt) {
                return new Emit(Data_Maybe.Nothing.value, halt(dictMonad["__superclass_Prelude.Applicative_0"]()));
            };
            if (v instanceof Emit) {
                return new Emit(Data_Maybe.Just.create(new Data_Tuple.Tuple(v.value0, v.value1)), msplit(dictMonad)(v.value1));
            };
            throw new Error("Failed pattern match at Data.Machine.Mealy line 132, column 9 - line 133, column 9: " + [ v.constructor.name ]);
        };
        return mealy(dictMonad["__superclass_Prelude.Applicative_0"]())(function (s) {
            return Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(f)(stepMealy(dictMonad)(s)(m));
        });
    };
};
var singleton = function (dictMonad) {
    return function (a) {
        return pureMealy(dictMonad["__superclass_Prelude.Applicative_0"]())(function (s) {
            return new Emit(a, halt(dictMonad["__superclass_Prelude.Applicative_0"]()));
        });
    };
};
var take = function (dictMonad) {
    return function (n) {
        return function (m) {
            var f = function (v) {
                if (v instanceof Halt) {
                    return Halt.value;
                };
                if (v instanceof Emit) {
                    return new Emit(v.value0, take(dictMonad)(n - 1)(v.value1));
                };
                throw new Error("Failed pattern match at Data.Machine.Mealy line 83, column 41 - line 84, column 41: " + [ v.constructor.name ]);
            };
            var $110 = n <= 0;
            if ($110) {
                return halt(dictMonad["__superclass_Prelude.Applicative_0"]());
            };
            if (!$110) {
                return mealy(dictMonad["__superclass_Prelude.Applicative_0"]())(function (s) {
                    return Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(f)(stepMealy(dictMonad)(s)(m));
                });
            };
            throw new Error("Failed pattern match: " + [ $110.constructor.name ]);
        };
    };
};
var once = function (dictMonad) {
    return take(dictMonad)(1);
};
var wrapEffect = function (dictMonad) {
    return function (fa) {
        return MealyT(Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(Prelude["const"](Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude.flip(Emit.create)(halt(dictMonad["__superclass_Prelude.Applicative_0"]())))(fa))));
    };
};
var $greater$greater$minus = function (dictMonad) {
    return function (ma) {
        return function (f) {
            return ifte(dictMonad)(ma)(f)(halt(dictMonad["__superclass_Prelude.Applicative_0"]()));
        };
    };
};
var functorMealy = function (dictMonad) {
    return new Prelude.Functor(function (f) {
        return function (m) {
            var g = function (v) {
                if (v instanceof Emit) {
                    return new Emit(f(v.value0), Prelude["<$>"](functorMealy(dictMonad))(f)(v.value1));
                };
                if (v instanceof Halt) {
                    return Halt.value;
                };
                throw new Error("Failed pattern match at Data.Machine.Mealy line 157, column 5 - line 158, column 5: " + [ v.constructor.name ]);
            };
            return mealy(dictMonad["__superclass_Prelude.Applicative_0"]())(function (s) {
                return Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(g)(stepMealy(dictMonad)(s)(m));
            });
        };
    });
};
var fromMaybe = function (dictMonad) {
    return function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return halt(dictMonad["__superclass_Prelude.Applicative_0"]());
        };
        if (v instanceof Data_Maybe.Just) {
            return singleton(dictMonad)(v.value0);
        };
        throw new Error("Failed pattern match at Data.Machine.Mealy line 116, column 1 - line 117, column 1: " + [ v.constructor.name ]);
    };
};
var fromArray = function (dictMonad) {
    return function (a) {
        var len = Data_Array.length(a);
        var go = function (n) {
            if (n < 0 || n >= len) {
                return halt(dictMonad["__superclass_Prelude.Applicative_0"]());
            };
            return Prelude["<>"](semigroupMealy(dictMonad))(fromMaybe(dictMonad)(Data_Array["!!"](a)(n)))(go(n + 1 | 0));
        };
        return go(0);
    };
};
var drop = function (dictMonad) {
    return function (n) {
        return function (m) {
            var $117 = n <= 0;
            if ($117) {
                return m;
            };
            if (!$117) {
                return mealy(dictMonad["__superclass_Prelude.Applicative_0"]())(function (s) {
                    var f = function (v) {
                        if (v instanceof Halt) {
                            return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(Halt.value);
                        };
                        if (v instanceof Emit) {
                            return stepMealy(dictMonad)(s)(drop(dictMonad)(n - 1)(v.value1));
                        };
                        throw new Error("Failed pattern match at Data.Machine.Mealy line 88, column 39 - line 89, column 39: " + [ v.constructor.name ]);
                    };
                    return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(stepMealy(dictMonad)(s)(m))(f);
                });
            };
            throw new Error("Failed pattern match: " + [ $117.constructor.name ]);
        };
    };
};
var collect = function (dictMonad) {
    return scanl(dictMonad)(Prelude.flip(Data_List.Cons.create))(Data_List.Nil.value);
};
var categoryMealy = function (dictMonad) {
    return new Prelude.Category(function () {
        return semigroupoidMealy(dictMonad);
    }, pureMealy(dictMonad["__superclass_Prelude.Applicative_0"]())(function (t) {
        return new Emit(t, halt(dictMonad["__superclass_Prelude.Applicative_0"]()));
    }));
};
var arrowMealy = function (dictMonad) {
    return new Control_Arrow.Arrow(function () {
        return strongMealy(dictMonad);
    }, function () {
        return categoryMealy(dictMonad);
    });
};
var applyMealy = function (dictMonad) {
    return new Prelude.Apply(function () {
        return functorMealy(dictMonad);
    }, function (f) {
        return function (x) {
            return mealy(dictMonad["__superclass_Prelude.Applicative_0"]())(function (s) {
                var ap = function (v) {
                    return function (v1) {
                        if (v instanceof Halt) {
                            return Halt.value;
                        };
                        if (v1 instanceof Halt) {
                            return Halt.value;
                        };
                        if (v instanceof Emit && v1 instanceof Emit) {
                            return new Emit(v.value0(v1.value0), Prelude["<*>"](applyMealy(dictMonad))(v.value1)(v1.value1));
                        };
                        throw new Error("Failed pattern match at Data.Machine.Mealy line 161, column 33 - line 162, column 33: " + [ v.constructor.name, v1.constructor.name ]);
                    };
                };
                return Prelude["<*>"]((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(ap)(stepMealy(dictMonad)(s)(f)))(stepMealy(dictMonad)(s)(x));
            });
        };
    });
};
var bindMealy = function (dictMonad) {
    return new Prelude.Bind(function () {
        return applyMealy(dictMonad);
    }, function (m) {
        return function (f) {
            return mealy(dictMonad["__superclass_Prelude.Applicative_0"]())(function (s) {
                var g = function (v) {
                    if (v instanceof Emit) {
                        var h = function (v1) {
                            if (v1 instanceof Emit) {
                                return new Emit(v1.value0, Prelude["<>"](semigroupMealy(dictMonad))(v1.value1)(Prelude[">>="](bindMealy(dictMonad))(v.value1)(f)));
                            };
                            if (v1 instanceof Halt) {
                                return Halt.value;
                            };
                            throw new Error("Failed pattern match at Data.Machine.Mealy line 208, column 34 - line 209, column 34: " + [ v1.constructor.name ]);
                        };
                        return Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(h)(stepMealy(dictMonad)(s)(f(v.value0)));
                    };
                    if (v instanceof Halt) {
                        return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(Halt.value);
                    };
                    throw new Error("Failed pattern match at Data.Machine.Mealy line 206, column 32 - line 210, column 32: " + [ v.constructor.name ]);
                };
                return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(stepMealy(dictMonad)(s)(m))(g);
            });
        };
    });
};
var zipWith = function (dictMonad) {
    return function (f) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](applyMealy(dictMonad))(Prelude["<$>"](functorMealy(dictMonad))(f)(a))(b);
            };
        };
    };
};
var applicativeMealy = function (dictMonad) {
    return new Prelude.Applicative(function () {
        return applyMealy(dictMonad);
    }, function (t) {
        return pureMealy(dictMonad["__superclass_Prelude.Applicative_0"]())(function (s) {
            return new Emit(t, halt(dictMonad["__superclass_Prelude.Applicative_0"]()));
        });
    });
};
var monadMealy = function (dictMonad) {
    return new Prelude.Monad(function () {
        return applicativeMealy(dictMonad);
    }, function () {
        return bindMealy(dictMonad);
    });
};
var monadEffMealy = function (dictMonad) {
    return function (dictMonadEff) {
        return new Control_Monad_Eff_Class.MonadEff(function () {
            return monadMealy(dictMonad);
        }, function ($137) {
            return wrapEffect(dictMonad)(Control_Monad_Eff_Class.liftEff(dictMonadEff)($137));
        });
    };
};
var altMealy = function (dictMonad) {
    return new Control_Alt.Alt(function () {
        return functorMealy(dictMonad);
    }, function (x) {
        return function (y) {
            return mealy(dictMonad["__superclass_Prelude.Applicative_0"]())(function (s) {
                var f = function (v) {
                    if (v instanceof Halt) {
                        return stepMealy(dictMonad)(s)(y);
                    };
                    if (v instanceof Emit) {
                        return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new Emit(v.value0, v.value1));
                    };
                    throw new Error("Failed pattern match at Data.Machine.Mealy line 216, column 31 - line 217, column 31: " + [ v.constructor.name ]);
                };
                return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(stepMealy(dictMonad)(s)(x))(f);
            });
        };
    });
};
var plusMealy = function (dictMonad) {
    return new Control_Plus.Plus(function () {
        return altMealy(dictMonad);
    }, halt(dictMonad["__superclass_Prelude.Applicative_0"]()));
};
var alternativeMealy = function (dictMonad) {
    return new Control_Alternative.Alternative(function () {
        return plusMealy(dictMonad);
    }, function () {
        return applicativeMealy(dictMonad);
    });
};
var monadPlus = function (dictMonad) {
    return new Control_MonadPlus.MonadPlus(function () {
        return alternativeMealy(dictMonad);
    }, function () {
        return monadMealy(dictMonad);
    });
};
module.exports = {
    Emit: Emit,
    Halt: Halt,
    wrapEffect: wrapEffect,
    ifte: ifte,
    ">>-": $greater$greater$minus,
    interleave: interleave,
    msplit: msplit,
    fromArray: fromArray,
    fromMaybe: fromMaybe,
    singleton: singleton,
    collect: collect,
    scanl: scanl,
    zipWith: zipWith,
    loop: loop,
    drop: drop,
    take: take,
    halt: halt,
    mealy: mealy,
    pureMealy: pureMealy,
    runMealy: runMealy,
    stepMealy: stepMealy,
    sink: sink,
    source: source,
    runMealyT: runMealyT,
    functorMealy: functorMealy,
    applyMealy: applyMealy,
    applicativeMealy: applicativeMealy,
    profunctorMealy: profunctorMealy,
    strongMealy: strongMealy,
    semigroupMealy: semigroupMealy,
    monoidMealy: monoidMealy,
    semigroupoidMealy: semigroupoidMealy,
    categoryMealy: categoryMealy,
    arrowMealy: arrowMealy,
    bindMealy: bindMealy,
    monadMealy: monadMealy,
    altMealy: altMealy,
    plusMealy: plusMealy,
    alternativeMealy: alternativeMealy,
    monadPlus: monadPlus,
    monadEffMealy: monadEffMealy,
    lazyMealy: lazyMealy
};
