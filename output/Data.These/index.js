// Generated by psc version 0.8.0.0
"use strict";
var Data_Bifoldable = require("Data.Bifoldable");
var Data_Bifunctor = require("Data.Bifunctor");
var Data_Bitraversable = require("Data.Bitraversable");
var Data_Foldable = require("Data.Foldable");
var Data_Maybe = require("Data.Maybe");
var Data_Traversable = require("Data.Traversable");
var Data_Tuple = require("Data.Tuple");
var Prelude = require("Prelude");
var This = (function () {
    function This(value0) {
        this.value0 = value0;
    };
    This.create = function (value0) {
        return new This(value0);
    };
    return This;
})();
var That = (function () {
    function That(value0) {
        this.value0 = value0;
    };
    That.create = function (value0) {
        return new That(value0);
    };
    return That;
})();
var Both = (function () {
    function Both(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Both.create = function (value0) {
        return function (value1) {
            return new Both(value0, value1);
        };
    };
    return Both;
})();
var thisOrBoth = function (a) {
    return function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return new This(a);
        };
        if (v instanceof Data_Maybe.Just) {
            return new Both(a, v.value0);
        };
        throw new Error("Failed pattern match at Data.These line 102, column 1 - line 103, column 1: " + [ a.constructor.name, v.constructor.name ]);
    };
};
var theseRight = function (v) {
    if (v instanceof Both) {
        return new Data_Maybe.Just(v.value1);
    };
    if (v instanceof That) {
        return new Data_Maybe.Just(v.value0);
    };
    return Data_Maybe.Nothing.value;
};
var theseLeft = function (v) {
    if (v instanceof Both) {
        return new Data_Maybe.Just(v.value0);
    };
    if (v instanceof This) {
        return new Data_Maybe.Just(v.value0);
    };
    return Data_Maybe.Nothing.value;
};
var these = function (l) {
    return function (r) {
        return function (lr) {
            return function (v) {
                if (v instanceof This) {
                    return l(v.value0);
                };
                if (v instanceof That) {
                    return r(v.value0);
                };
                if (v instanceof Both) {
                    return lr(v.value0)(v.value1);
                };
                throw new Error("Failed pattern match at Data.These line 97, column 1 - line 98, column 1: " + [ l.constructor.name, r.constructor.name, lr.constructor.name, v.constructor.name ]);
            };
        };
    };
};
var thatOrBoth = function (b) {
    return function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return new That(b);
        };
        if (v instanceof Data_Maybe.Just) {
            return new Both(v.value0, b);
        };
        throw new Error("Failed pattern match at Data.These line 106, column 1 - line 107, column 1: " + [ b.constructor.name, v.constructor.name ]);
    };
};
var semigroupThese = function (dictSemigroup) {
    return function (dictSemigroup1) {
        return new Prelude.Semigroup(function (v) {
            return function (v1) {
                if (v instanceof This && v1 instanceof This) {
                    return new This(Prelude["<>"](dictSemigroup)(v.value0)(v1.value0));
                };
                if (v instanceof This && v1 instanceof That) {
                    return new Both(v.value0, v1.value0);
                };
                if (v instanceof This && v1 instanceof Both) {
                    return new Both(Prelude["<>"](dictSemigroup)(v.value0)(v1.value0), v1.value1);
                };
                if (v instanceof That && v1 instanceof This) {
                    return new Both(v1.value0, v.value0);
                };
                if (v instanceof That && v1 instanceof That) {
                    return new That(Prelude["<>"](dictSemigroup1)(v.value0)(v1.value0));
                };
                if (v instanceof That && v1 instanceof Both) {
                    return new Both(v1.value0, Prelude["<>"](dictSemigroup1)(v.value0)(v1.value1));
                };
                if (v instanceof Both && v1 instanceof This) {
                    return new Both(Prelude["<>"](dictSemigroup)(v.value0)(v1.value0), v.value1);
                };
                if (v instanceof Both && v1 instanceof That) {
                    return new Both(v.value0, Prelude["<>"](dictSemigroup1)(v.value1)(v1.value0));
                };
                if (v instanceof Both && v1 instanceof Both) {
                    return new Both(Prelude["<>"](dictSemigroup)(v.value0)(v1.value0), Prelude["<>"](dictSemigroup1)(v.value1)(v1.value1));
                };
                throw new Error("Failed pattern match at Data.These line 30, column 1 - line 41, column 1: " + [ v.constructor.name, v1.constructor.name ]);
            };
        });
    };
};
var functorThese = new Prelude.Functor(function (f) {
    return function (v) {
        if (v instanceof Both) {
            return new Both(v.value0, f(v.value1));
        };
        if (v instanceof That) {
            return new That(f(v.value0));
        };
        if (v instanceof This) {
            return new This(v.value0);
        };
        throw new Error("Failed pattern match at Data.These line 41, column 1 - line 46, column 1: " + [ f.constructor.name, v.constructor.name ]);
    };
});
var fromThese = function (a) {
    return function (x) {
        return function (v) {
            if (v instanceof This) {
                return new Data_Tuple.Tuple(v.value0, x);
            };
            if (v instanceof That) {
                return new Data_Tuple.Tuple(a, v.value0);
            };
            if (v instanceof Both) {
                return new Data_Tuple.Tuple(v.value0, v.value1);
            };
            throw new Error("Failed pattern match at Data.These line 110, column 1 - line 111, column 1: " + [ a.constructor.name, x.constructor.name, v.constructor.name ]);
        };
    };
};
var foldableThese = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function ($147) {
            return Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(dictMonoid)(f)(theseRight($147));
        };
    };
}, function (f) {
    return function (z) {
        return function ($148) {
            return Data_Foldable.foldl(Data_Foldable.foldableMaybe)(f)(z)(theseRight($148));
        };
    };
}, function (f) {
    return function (z) {
        return function ($149) {
            return Data_Foldable.foldr(Data_Foldable.foldableMaybe)(f)(z)(theseRight($149));
        };
    };
});
var traversableThese = new Data_Traversable.Traversable(function () {
    return foldableThese;
}, function () {
    return functorThese;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof This) {
            return Prelude.pure(dictApplicative)(new This(v.value0));
        };
        if (v instanceof That) {
            return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(That.create)(v.value0);
        };
        if (v instanceof Both) {
            return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Both.create(v.value0))(v.value1);
        };
        throw new Error("Failed pattern match at Data.These line 51, column 1 - line 59, column 1: " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            if (v instanceof This) {
                return Prelude.pure(dictApplicative)(new This(v.value0));
            };
            if (v instanceof That) {
                return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(That.create)(f(v.value0));
            };
            if (v instanceof Both) {
                return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Both.create(v.value0))(f(v.value1));
            };
            throw new Error("Failed pattern match at Data.These line 51, column 1 - line 59, column 1: " + [ f.constructor.name, v.constructor.name ]);
        };
    };
});
var bifunctorThese = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            if (v instanceof This) {
                return new This(f(v.value0));
            };
            if (v instanceof That) {
                return new That(g(v.value0));
            };
            if (v instanceof Both) {
                return new Both(f(v.value0), g(v.value1));
            };
            throw new Error("Failed pattern match at Data.These line 59, column 1 - line 64, column 1: " + [ f.constructor.name, g.constructor.name, v.constructor.name ]);
        };
    };
});
var bifoldableThese = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
    return function (f) {
        return function (g) {
            return these(f)(g)(function (x) {
                return function (y) {
                    return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(x))(g(y));
                };
            });
        };
    };
}, function (f) {
    return function (g) {
        return function (z) {
            return these(f(z))(g(z))(function (x) {
                return function (y) {
                    return g(f(z)(x))(y);
                };
            });
        };
    };
}, function (f) {
    return function (g) {
        return function (z) {
            return these(function (v) {
                return f(v)(z);
            })(function (v) {
                return g(v)(z);
            })(function (x) {
                return function (y) {
                    return f(x)(g(y)(z));
                };
            });
        };
    };
});
var bitraversableThese = new Data_Bitraversable.Bitraversable(function () {
    return bifoldableThese;
}, function () {
    return bifunctorThese;
}, function (dictApplicative) {
    return Data_Bitraversable.bitraverse(bitraversableThese)(dictApplicative)(Prelude.id(Prelude.categoryFn))(Prelude.id(Prelude.categoryFn));
}, function (dictApplicative) {
    return function (f) {
        return function (g) {
            return function (v) {
                if (v instanceof This) {
                    return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(This.create)(f(v.value0));
                };
                if (v instanceof That) {
                    return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(That.create)(g(v.value0));
                };
                if (v instanceof Both) {
                    return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Both.create)(f(v.value0)))(g(v.value1));
                };
                throw new Error("Failed pattern match: " + [ f.constructor.name, g.constructor.name, v.constructor.name ]);
            };
        };
    };
});
var applyThese = function (dictSemigroup) {
    return new Prelude.Apply(function () {
        return functorThese;
    }, function (v) {
        return function (v1) {
            if (v instanceof This) {
                return new This(v.value0);
            };
            if (v instanceof That && v1 instanceof This) {
                return new This(v1.value0);
            };
            if (v instanceof That && v1 instanceof That) {
                return new That(v.value0(v1.value0));
            };
            if (v instanceof That && v1 instanceof Both) {
                return new Both(v1.value0, v.value0(v1.value1));
            };
            if (v instanceof Both && v1 instanceof This) {
                return new This(Prelude["<>"](dictSemigroup)(v.value0)(v1.value0));
            };
            if (v instanceof Both && v1 instanceof That) {
                return new Both(v.value0, v.value1(v1.value0));
            };
            if (v instanceof Both && v1 instanceof Both) {
                return new Both(Prelude["<>"](dictSemigroup)(v.value0)(v1.value0), v.value1(v1.value1));
            };
            throw new Error("Failed pattern match at Data.These line 75, column 1 - line 84, column 1: " + [ v.constructor.name, v1.constructor.name ]);
        };
    });
};
var bindThese = function (dictSemigroup) {
    return new Prelude.Bind(function () {
        return applyThese(dictSemigroup);
    }, function (v) {
        return function (k) {
            if (v instanceof This) {
                return new This(v.value0);
            };
            if (v instanceof That) {
                return k(v.value0);
            };
            if (v instanceof Both) {
                var $140 = k(v.value1);
                if ($140 instanceof This) {
                    return new This(Prelude["<>"](dictSemigroup)(v.value0)($140.value0));
                };
                if ($140 instanceof That) {
                    return new Both(v.value0, $140.value0);
                };
                if ($140 instanceof Both) {
                    return new Both(Prelude["<>"](dictSemigroup)(v.value0)($140.value0), $140.value1);
                };
                throw new Error("Failed pattern match at Data.These line 87, column 1 - line 95, column 1: " + [ $140.constructor.name ]);
            };
            throw new Error("Failed pattern match at Data.These line 87, column 1 - line 95, column 1: " + [ v.constructor.name, k.constructor.name ]);
        };
    });
};
var applicativeThese = function (dictSemigroup) {
    return new Prelude.Applicative(function () {
        return applyThese(dictSemigroup);
    }, That.create);
};
var monadThese = function (dictSemigroup) {
    return new Prelude.Monad(function () {
        return applicativeThese(dictSemigroup);
    }, function () {
        return bindThese(dictSemigroup);
    });
};
module.exports = {
    This: This, 
    That: That, 
    Both: Both, 
    theseRight: theseRight, 
    theseLeft: theseLeft, 
    fromThese: fromThese, 
    thatOrBoth: thatOrBoth, 
    thisOrBoth: thisOrBoth, 
    these: these, 
    semigroupThese: semigroupThese, 
    functorThese: functorThese, 
    foldableThese: foldableThese, 
    traversableThese: traversableThese, 
    bifunctorThese: bifunctorThese, 
    bifoldableThese: bifoldableThese, 
    bitraversableThese: bitraversableThese, 
    applyThese: applyThese, 
    applicativeThese: applicativeThese, 
    bindThese: bindThese, 
    monadThese: monadThese
};
