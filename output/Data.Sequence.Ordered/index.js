// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Data_Lazy = require("Data.Lazy");
var Data_Tuple = require("Data.Tuple");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");
var Data_Monoid_Additive = require("Data.Monoid.Additive");
var Data_Foldable = require("Data.Foldable");
var Data_Unfoldable = require("Data.Unfoldable");
var Unsafe_Coerce = require("Unsafe.Coerce");
var Data_Sequence_Internal = require("Data.Sequence.Internal");
var Data_FingerTree = require("Data.FingerTree");
var OrdSeq = function (x) {
    return x;
};
var popLeast = function (dictOrd) {
    return function (v) {
        var $45 = Data_FingerTree.viewL(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(v);
        if ($45 instanceof Data_FingerTree.NilL) {
            return Data_Maybe.Nothing.value;
        };
        if ($45 instanceof Data_FingerTree.ConsL) {
            return new Data_Maybe.Just(new Data_Tuple.Tuple(Data_Sequence_Internal.getElem($45.value0), Data_Lazy.force($45.value1)));
        };
        throw new Error("Failed pattern match at Data.Sequence.Ordered line 174, column 1 - line 175, column 1: " + [ $45.constructor.name ]);
    };
};
var popGreatest = function (dictOrd) {
    return function (v) {
        var $49 = Data_FingerTree.viewR(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(v);
        if ($49 instanceof Data_FingerTree.NilR) {
            return Data_Maybe.Nothing.value;
        };
        if ($49 instanceof Data_FingerTree.SnocR) {
            return new Data_Maybe.Just(new Data_Tuple.Tuple(Data_Sequence_Internal.getElem($49.value1), Data_Lazy.force($49.value0)));
        };
        throw new Error("Failed pattern match at Data.Sequence.Ordered line 191, column 1 - line 192, column 1: " + [ $49.constructor.name ]);
    };
};
var partition = function (dictOrd) {
    return function (k) {
        return function (v) {
            var t = Data_FingerTree.split(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(function (y) {
                return Prelude[">="](Data_Sequence_Internal.ordKey(dictOrd))(y)(new Data_Sequence_Internal.Key(k));
            })(v);
            var r = Data_Tuple.snd(t);
            var l = Data_Tuple.fst(t);
            return new Data_Tuple.Tuple(Data_Lazy.force(l), Data_Lazy.force(r));
        };
    };
};
var $$null = function (v) {
    if (v instanceof Data_FingerTree.Empty) {
        return true;
    };
    return false;
};
var merge = function (dictOrd) {
    return function (v) {
        return function (v1) {
            var go = function (as) {
                return function (bs) {
                    var $57 = Data_FingerTree.viewL(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(bs);
                    if ($57 instanceof Data_FingerTree.NilL) {
                        return as;
                    };
                    if ($57 instanceof Data_FingerTree.ConsL) {
                        var t = Data_FingerTree.split(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(function (c) {
                            return Prelude[">"](Data_Sequence_Internal.ordKey(dictOrd))(c)(Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredElemKey)($57.value0));
                        })(as);
                        var r = Data_Lazy.force(Data_Tuple.snd(t));
                        var l = Data_Lazy.force(Data_Tuple.fst(t));
                        return Prelude["<>"](Data_FingerTree.semigroupFingerTree(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey))(l)(Data_FingerTree.cons(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)($57.value0)(go(Data_Lazy.force($57.value1))(r)));
                    };
                    throw new Error("Failed pattern match at Data.Sequence.Ordered line 137, column 1 - line 138, column 1: " + [ $57.constructor.name ]);
                };
            };
            return go(v)(v1);
        };
    };
};
var semigroupOrdSeq = function (dictOrd) {
    return new Prelude.Semigroup(merge(dictOrd));
};
var mapOrdSeq = function (dictFunctor) {
    return Unsafe_Coerce.unsafeCoerce;
};
var least = function (dictOrd) {
    return function (v) {
        var $61 = Data_FingerTree.viewL(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(v);
        if ($61 instanceof Data_FingerTree.NilL) {
            return Data_Maybe.Nothing.value;
        };
        if ($61 instanceof Data_FingerTree.ConsL) {
            return new Data_Maybe.Just(Data_Sequence_Internal.getElem($61.value0));
        };
        throw new Error("Failed pattern match at Data.Sequence.Ordered line 166, column 1 - line 167, column 1: " + [ $61.constructor.name ]);
    };
};
var intersection = function (dictOrd) {
    return function (v) {
        return function (v1) {
            var go = function (as) {
                return function (bs) {
                    var $66 = new Data_Tuple.Tuple(Data_FingerTree.viewL(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(as), Data_FingerTree.viewL(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(bs));
                    if ($66.value0 instanceof Data_FingerTree.NilL) {
                        return Data_FingerTree.Empty.value;
                    };
                    if ($66.value1 instanceof Data_FingerTree.NilL) {
                        return Data_FingerTree.Empty.value;
                    };
                    if ($66.value0 instanceof Data_FingerTree.ConsL && $66.value1 instanceof Data_FingerTree.ConsL) {
                        var $71 = Prelude.compare(Data_Sequence_Internal.ordElem(dictOrd))($66.value0.value0)($66.value1.value0);
                        if ($71 instanceof Prelude.LT) {
                            return go(Data_Lazy.force($66.value0.value1))(bs);
                        };
                        if ($71 instanceof Prelude.EQ) {
                            return Data_FingerTree.cons(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)($66.value0.value0)(go(Data_Lazy.force($66.value0.value1))(Data_Lazy.force($66.value1.value1)));
                        };
                        if ($71 instanceof Prelude.GT) {
                            return go(as)(Data_Lazy.force($66.value1.value1));
                        };
                        throw new Error("Failed pattern match at Data.Sequence.Ordered line 151, column 1 - line 152, column 1: " + [ $71.constructor.name ]);
                    };
                    throw new Error("Failed pattern match at Data.Sequence.Ordered line 151, column 1 - line 152, column 1: " + [ $66.constructor.name ]);
                };
            };
            return go(v)(v1);
        };
    };
};
var insert = function (dictOrd) {
    return function (x) {
        return function (v) {
            var t = Data_FingerTree.split(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(function (y) {
                return Prelude[">="](Data_Sequence_Internal.ordKey(dictOrd))(y)(new Data_Sequence_Internal.Key(x));
            })(v);
            var r = Data_Tuple.snd(t);
            var l = Data_Tuple.fst(t);
            return Data_FingerTree.append(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(Data_Lazy.force(l))(Data_FingerTree.cons(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(x)(Data_Lazy.force(r)));
        };
    };
};
var greatest = function (dictOrd) {
    return function (v) {
        var $81 = Data_FingerTree.viewR(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(v);
        if ($81 instanceof Data_FingerTree.NilR) {
            return Data_Maybe.Nothing.value;
        };
        if ($81 instanceof Data_FingerTree.SnocR) {
            return new Data_Maybe.Just(Data_Sequence_Internal.getElem($81.value1));
        };
        throw new Error("Failed pattern match at Data.Sequence.Ordered line 182, column 1 - line 183, column 1: " + [ $81.constructor.name ]);
    };
};
var fromOrdSeqDescending = function (dictFunctor) {
    return function (dictUnfoldable) {
        return function (v) {
            return Data_Sequence_Internal.mapGetElem(dictFunctor)(Data_FingerTree.unfoldRight(dictUnfoldable)(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(v));
        };
    };
};
var fromOrdSeq = function (dictFunctor) {
    return function (dictUnfoldable) {
        return function (v) {
            return Data_Sequence_Internal.mapGetElem(dictFunctor)(Data_FingerTree.unfoldLeft(dictUnfoldable)(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(v));
        };
    };
};
var showOrdSeq = function (dictShow) {
    return new Prelude.Show(function (xs) {
        return "(toOrdSeq [" + (Data_Sequence_Internal.strJoin(dictShow)(",")(fromOrdSeq(Prelude.functorArray)(Data_Unfoldable.unfoldableArray)(xs)) + "])");
    });
};
var foldableOrdSeq = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return Data_Foldable.foldMap(Data_FingerTree.foldableFingerTree)(dictMonoid)(Data_Sequence_Internal.liftElem(f))(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return Data_Foldable.foldl(Data_FingerTree.foldableFingerTree)(Data_Sequence_Internal.lift2Elem(f))(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return Data_Foldable.foldr(Data_FingerTree.foldableFingerTree)(Data_Sequence_Internal.liftElem(f))(z)(v);
        };
    };
});
var length = function ($98) {
    return Data_Monoid_Additive.runAdditive(Data_Foldable.foldMap(foldableOrdSeq)(Data_Monoid_Additive.monoidAdditive(Prelude.semiringInt))(Prelude["const"](1))($98));
};
var eqOrdSeq = function (dictEq) {
    return new Prelude.Eq(function (v) {
        return function (v1) {
            return Data_FingerTree.eqFingerTree(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(Data_Sequence_Internal.eqElem(dictEq))(v)(v1);
        };
    });
};
var empty = Data_FingerTree.Empty.value;
var monoidOrdSeq = function (dictOrd) {
    return new Data_Monoid.Monoid(function () {
        return semigroupOrdSeq(dictOrd);
    }, empty);
};
var toOrdSeq = function (dictFoldable) {
    return function (dictOrd) {
        return Data_Foldable.foldr(dictFoldable)(insert(dictOrd))(empty);
    };
};
var sort = function (dictFunctor) {
    return function (dictFoldable) {
        return function (dictUnfoldable) {
            return function (dictOrd) {
                return function ($99) {
                    return fromOrdSeq(dictFunctor)(dictUnfoldable)(toOrdSeq(dictFoldable)(dictOrd)($99));
                };
            };
        };
    };
};
var deleteAll = function (dictOrd) {
    return function (x) {
        return function (v) {
            var t = Data_FingerTree.split(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(function (y) {
                return Prelude[">="](Data_Sequence_Internal.ordKey(dictOrd))(y)(new Data_Sequence_Internal.Key(x));
            })(v);
            var r = Data_Lazy.force(Data_Tuple.snd(t));
            var t__ALT = Data_FingerTree.split(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(function (y) {
                return Prelude[">"](Data_Sequence_Internal.ordKey(dictOrd))(y)(new Data_Sequence_Internal.Key(x));
            })(r);
            var r__ALT = Data_Lazy.force(Data_Tuple.snd(t__ALT));
            var l = Data_Lazy.force(Data_Tuple.fst(t));
            return Prelude["<>"](Data_FingerTree.semigroupFingerTree(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey))(l)(r__ALT);
        };
    };
};
module.exports = {
    sort: sort,
    fromOrdSeqDescending: fromOrdSeqDescending,
    fromOrdSeq: fromOrdSeq,
    deleteAll: deleteAll,
    intersection: intersection,
    merge: merge,
    partition: partition,
    popGreatest: popGreatest,
    popLeast: popLeast,
    greatest: greatest,
    least: least,
    length: length,
    "null": $$null,
    insert: insert,
    toOrdSeq: toOrdSeq,
    empty: empty,
    eqOrdSeq: eqOrdSeq,
    showOrdSeq: showOrdSeq,
    semigroupOrdSeq: semigroupOrdSeq,
    monoidOrdSeq: monoidOrdSeq,
    foldableOrdSeq: foldableOrdSeq
};
