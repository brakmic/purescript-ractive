// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Data_String = require("Data.String");
var Test_QuickCheck_Gen = require("Test.QuickCheck.Gen");
var Test_QuickCheck_Arbitrary = require("Test.QuickCheck.Arbitrary");
var Control_Monad_State_Trans = require("Control.Monad.State.Trans");
var Data_Identity = require("Data.Identity");
var AlphaNumString = function (x) {
    return x;
};
var runAlphaNumString = function (v) {
    return v;
};
var coarbAlphaNumString = new Test_QuickCheck_Arbitrary.Coarbitrary(function (v) {
    return Test_QuickCheck_Arbitrary.coarbitrary(Test_QuickCheck_Arbitrary.coarbString)(v);
});
var arbAlphaNumString = new Test_QuickCheck_Arbitrary.Arbitrary((function () {
    var rest = Data_String.toCharArray("bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789");
    var anyChar = Test_QuickCheck_Gen.oneOf(Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))("a"))(Prelude.map(Prelude.functorArray)(Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity)))(rest));
    return Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(function ($4) {
        return AlphaNumString(Data_String.fromCharArray($4));
    })(Test_QuickCheck_Gen.arrayOf(anyChar));
})());
module.exports = {
    AlphaNumString: AlphaNumString, 
    runAlphaNumString: runAlphaNumString, 
    arbAlphaNumString: arbAlphaNumString, 
    coarbAlphaNumString: coarbAlphaNumString
};
