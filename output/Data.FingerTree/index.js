// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Data_Array = require("Data.Array");
var Data_Array_Unsafe = require("Data.Array.Unsafe");
var Data_Foldable = require("Data.Foldable");
var Data_Lazy = require("Data.Lazy");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");
var Data_Traversable = require("Data.Traversable");
var Data_Tuple = require("Data.Tuple");
var Data_Unfoldable = require("Data.Unfoldable");
var Control_Monad_Eff_Exception_Unsafe = require("Control.Monad.Eff.Exception.Unsafe");
var Data_Sequence_Internal = require("Data.Sequence.Internal");
var NilR = (function () {
    function NilR() {

    };
    NilR.value = new NilR();
    return NilR;
})();
var SnocR = (function () {
    function SnocR(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    SnocR.create = function (value0) {
        return function (value1) {
            return new SnocR(value0, value1);
        };
    };
    return SnocR;
})();
var NilL = (function () {
    function NilL() {

    };
    NilL.value = new NilL();
    return NilL;
})();
var ConsL = (function () {
    function ConsL(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ConsL.create = function (value0) {
        return function (value1) {
            return new ConsL(value0, value1);
        };
    };
    return ConsL;
})();
var Split = (function () {
    function Split(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Split.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Split(value0, value1, value2);
            };
        };
    };
    return Split;
})();
var Node2 = (function () {
    function Node2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Node2.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Node2(value0, value1, value2);
            };
        };
    };
    return Node2;
})();
var Node3 = (function () {
    function Node3(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Node3.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Node3(value0, value1, value2, value3);
                };
            };
        };
    };
    return Node3;
})();
var LazySplit = (function () {
    function LazySplit(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    LazySplit.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new LazySplit(value0, value1, value2);
            };
        };
    };
    return LazySplit;
})();
var Empty = (function () {
    function Empty() {

    };
    Empty.value = new Empty();
    return Empty;
})();
var Single = (function () {
    function Single(value0) {
        this.value0 = value0;
    };
    Single.create = function (value0) {
        return new Single(value0);
    };
    return Single;
})();
var Deep = (function () {
    function Deep(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Deep.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Deep(value0, value1, value2, value3);
                };
            };
        };
    };
    return Deep;
})();
var unsafeSplitDigit = function (dictMonoid) {
    return function (dictMeasured) {
        return function (p) {
            return function (i) {
                return function (as) {
                    var $118 = Data_Array.length(as);
                    if ($118 === 1) {
                        return new Split([  ], Data_Sequence_Internal["!"](as)(0), [  ]);
                    };
                    var bs = Data_Array.drop(1)(as);
                    var a = Data_Sequence_Internal["!"](as)(0);
                    var i__ALT = Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(i)(Data_Sequence_Internal.measure(dictMeasured)(a));
                    var $119 = p(i__ALT);
                    if ($119) {
                        return new Split([  ], a, bs);
                    };
                    if (!$119) {
                        var $120 = unsafeSplitDigit(dictMonoid)(dictMeasured)(p)(i__ALT)(bs);
                        return new Split(Data_Array.cons(a)($120.value0), $120.value1, $120.value2);
                    };
                    throw new Error("Failed pattern match: " + [ $119.constructor.name ]);
                };
            };
        };
    };
};
var tailDigit = Data_Array_Unsafe.tail;
var showNode = function (dictShow) {
    return function (dictShow1) {
        return new Prelude.Show(function (v) {
            if (v instanceof Node2) {
                return "Node2 (" + (Prelude.show(dictShow1)(v.value0) + (") (" + (Prelude.show(dictShow)(v.value1) + (") (" + (Prelude.show(dictShow)(v.value2) + ")")))));
            };
            if (v instanceof Node3) {
                return "Node3 (" + (Prelude.show(dictShow1)(v.value0) + (") (" + (Prelude.show(dictShow)(v.value1) + (") (" + (Prelude.show(dictShow)(v.value2) + (") (" + (Prelude.show(dictShow)(v.value3) + ")")))))));
            };
            throw new Error("Failed pattern match at Data.FingerTree line 68, column 1 - line 81, column 1: " + [ v.constructor.name ]);
        });
    };
};
var showFingerTree = function (dictShow) {
    return function (dictShow1) {
        return new Prelude.Show(function (v) {
            if (v instanceof Empty) {
                return "Empty";
            };
            if (v instanceof Single) {
                return "Single (" + (Prelude.show(dictShow1)(v.value0) + ")");
            };
            if (v instanceof Deep) {
                return "Deep (" + (Prelude.show(Data_Lazy.showLazy(dictShow))(v.value0) + (") (" + (Prelude.show(Prelude.showArray(dictShow1))(v.value1) + (") (" + (Prelude.show(Data_Lazy.showLazy(showFingerTree(dictShow)(showNode(dictShow1)(dictShow))))(v.value2) + (") (" + (Prelude.show(Prelude.showArray(dictShow1))(v.value3) + ")")))))));
            };
            throw new Error("Failed pattern match: " + [ v.constructor.name ]);
        });
    };
};
var nodeToDigit = function (v) {
    if (v instanceof Node2) {
        return [ v.value1, v.value2 ];
    };
    if (v instanceof Node3) {
        return [ v.value1, v.value2, v.value3 ];
    };
    throw new Error("Failed pattern match at Data.FingerTree line 87, column 1 - line 88, column 1: " + [ v.constructor.name ]);
};
var node3 = function (dictMonoid) {
    return function (dictMeasured) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return new Node3(Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(Data_Sequence_Internal.measure(dictMeasured)(a))(Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(Data_Sequence_Internal.measure(dictMeasured)(b))(Data_Sequence_Internal.measure(dictMeasured)(c))), a, b, c);
                };
            };
        };
    };
};
var node2 = function (dictMonoid) {
    return function (dictMeasured) {
        return function (a) {
            return function (b) {
                return new Node2(Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(Data_Sequence_Internal.measure(dictMeasured)(a))(Data_Sequence_Internal.measure(dictMeasured)(b)), a, b);
            };
        };
    };
};
var nodes = function (dictMonoid) {
    return function (dictMeasured) {
        return function (v) {
            if (v.length === 2) {
                return [ node2(dictMonoid)(dictMeasured)(v[0])(v[1]) ];
            };
            if (v.length === 3) {
                return [ node3(dictMonoid)(dictMeasured)(v[0])(v[1])(v[2]) ];
            };
            if (v.length === 4) {
                return [ node2(dictMonoid)(dictMeasured)(v[0])(v[1]), node2(dictMonoid)(dictMeasured)(v[2])(v[3]) ];
            };
            return Data_Array[":"](node3(dictMonoid)(dictMeasured)(Data_Sequence_Internal["!"](v)(0))(Data_Sequence_Internal["!"](v)(1))(Data_Sequence_Internal["!"](v)(2)))(nodes(dictMonoid)(dictMeasured)(Data_Array.drop(3)(v)));
        };
    };
};
var measuredNode = new Data_Sequence_Internal.Measured(function (v) {
    if (v instanceof Node2) {
        return v.value0;
    };
    if (v instanceof Node3) {
        return v.value0;
    };
    throw new Error("Failed pattern match at Data.FingerTree line 107, column 1 - line 113, column 1: " + [ v.constructor.name ]);
});
var measuredFingerTree = function (dictMonoid) {
    return function (dictMeasured) {
        return new Data_Sequence_Internal.Measured(function (v) {
            if (v instanceof Empty) {
                return Data_Monoid.mempty(dictMonoid);
            };
            if (v instanceof Single) {
                return Data_Sequence_Internal.measure(dictMeasured)(v.value0);
            };
            if (v instanceof Deep) {
                return Data_Lazy.force(v.value0);
            };
            throw new Error("Failed pattern match at Data.FingerTree line 226, column 1 - line 232, column 1: " + [ v.constructor.name ]);
        });
    };
};
var lazyEmpty = Data_Lazy.defer(function (v) {
    return Empty.value;
});
var lastDigit = Data_Array_Unsafe.last;
var initDigit = Data_Array_Unsafe.init;
var headDigit = Data_Array_Unsafe.head;
var functorViewL = function (dictFunctor) {
    return new Prelude.Functor(function (f) {
        return function (v) {
            if (v instanceof NilL) {
                return NilL.value;
            };
            if (v instanceof ConsL) {
                return new ConsL(f(v.value0), Prelude["<$>"](Data_Lazy.functorLazy)(Prelude["<$>"](dictFunctor)(f))(v.value1));
            };
            throw new Error("Failed pattern match at Data.FingerTree line 277, column 1 - line 281, column 1: " + [ f.constructor.name, v.constructor.name ]);
        };
    });
};
var functorNode = new Prelude.Functor(function (f) {
    return function (v) {
        if (v instanceof Node2) {
            return new Node2(v.value0, f(v.value1), f(v.value2));
        };
        if (v instanceof Node3) {
            return new Node3(v.value0, f(v.value1), f(v.value2), f(v.value3));
        };
        throw new Error("Failed pattern match at Data.FingerTree line 91, column 1 - line 95, column 1: " + [ f.constructor.name, v.constructor.name ]);
    };
});
var functorFingerTree = new Prelude.Functor(function (f) {
    return function (v) {
        if (v instanceof Empty) {
            return Empty.value;
        };
        if (v instanceof Single) {
            return new Single(f(v.value0));
        };
        if (v instanceof Deep) {
            return new Deep(v.value0, Prelude["<$>"](Prelude.functorArray)(f)(v.value1), Data_Sequence_Internal["<$$$>"](Data_Lazy.functorLazy)(functorFingerTree)(functorNode)(f)(v.value2), Prelude["<$>"](Prelude.functorArray)(f)(v.value3));
        };
        throw new Error("Failed pattern match: " + [ f.constructor.name, v.constructor.name ]);
    };
});
var fullyForce = function (ft) {
    if (ft instanceof Deep) {
        var v__ALT = Data_Lazy.force(ft.value0);
        var m__ALT = fullyForce(Data_Lazy.force(ft.value2));
        return ft;
    };
    return ft;
};
var foldableNode = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (xs) {
            return Data_Foldable.foldr(foldableNode)(function (x) {
                return function (acc) {
                    return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                };
            })(Data_Monoid.mempty(dictMonoid))(xs);
        };
    };
}, function ($greater$minus) {
    return function (z) {
        return function (v) {
            if (v instanceof Node2) {
                return $greater$minus($greater$minus(z)(v.value1))(v.value2);
            };
            if (v instanceof Node3) {
                return $greater$minus($greater$minus($greater$minus(z)(v.value1))(v.value2))(v.value3);
            };
            throw new Error("Failed pattern match: " + [ $greater$minus.constructor.name, z.constructor.name, v.constructor.name ]);
        };
    };
}, function ($minus$less) {
    return function (z) {
        return function (v) {
            if (v instanceof Node2) {
                return $minus$less(v.value1)($minus$less(v.value2)(z));
            };
            if (v instanceof Node3) {
                return $minus$less(v.value1)($minus$less(v.value2)($minus$less(v.value3)(z)));
            };
            throw new Error("Failed pattern match: " + [ $minus$less.constructor.name, z.constructor.name, v.constructor.name ]);
        };
    };
});
var traversableNode = new Data_Traversable.Traversable(function () {
    return foldableNode;
}, function () {
    return functorNode;
}, function (dictApplicative) {
    return Data_Traversable.traverse(traversableNode)(dictApplicative)(Prelude.id(Prelude.categoryFn));
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            if (v instanceof Node2) {
                return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Node2.create(v.value0))(f(v.value1)))(f(v.value2));
            };
            if (v instanceof Node3) {
                return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Node3.create(v.value0))(f(v.value1)))(f(v.value2)))(f(v.value3));
            };
            throw new Error("Failed pattern match: " + [ f.constructor.name, v.constructor.name ]);
        };
    };
});
var foldableFingerTree = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (xs) {
            return Data_Foldable.foldr(foldableFingerTree)(function (x) {
                return function (acc) {
                    return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                };
            })(Data_Monoid.mempty(dictMonoid))(xs);
        };
    };
}, function ($greater$minus) {
    return function (z) {
        return function (v) {
            if (v instanceof Empty) {
                return z;
            };
            if (v instanceof Single) {
                return $greater$minus(z)(v.value0);
            };
            if (v instanceof Deep) {
                var $greater$greater$greater$minus = Data_Foldable.foldl(foldableFingerTree)(Data_Foldable.foldl(foldableNode)($greater$minus));
                var $greater$greater$minus = Data_Foldable.foldl(Data_Foldable.foldableArray)($greater$minus);
                return $greater$greater$minus($greater$greater$greater$minus($greater$greater$minus(z)(v.value1))(Data_Lazy.force(v.value2)))(v.value3);
            };
            throw new Error("Failed pattern match: " + [ $greater$minus.constructor.name, z.constructor.name, v.constructor.name ]);
        };
    };
}, function ($minus$less) {
    return function (z) {
        return function (v) {
            if (v instanceof Empty) {
                return z;
            };
            if (v instanceof Single) {
                return $minus$less(v.value0)(z);
            };
            if (v instanceof Deep) {
                var $minus$less$less$less = Prelude.flip(Data_Foldable.foldr(foldableFingerTree)(Prelude.flip(Data_Foldable.foldr(foldableNode)($minus$less))));
                var $minus$less$less = Prelude.flip(Data_Foldable.foldr(Data_Foldable.foldableArray)($minus$less));
                var $plus$less$less = Prelude.flip(Data_Foldable.foldr(Data_Foldable.foldableArray)($minus$less));
                return $plus$less$less(v.value1)($minus$less$less$less(Data_Lazy.force(v.value2))($minus$less$less(v.value3)(z)));
            };
            throw new Error("Failed pattern match: " + [ $minus$less.constructor.name, z.constructor.name, v.constructor.name ]);
        };
    };
});
var traversableFingerTree = new Data_Traversable.Traversable(function () {
    return foldableFingerTree;
}, function () {
    return functorFingerTree;
}, function (dictApplicative) {
    return Data_Traversable.traverse(traversableFingerTree)(dictApplicative)(Prelude.id(Prelude.categoryFn));
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            if (v instanceof Empty) {
                return Prelude.pure(dictApplicative)(Empty.value);
            };
            if (v instanceof Single) {
                return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Single.create)(f(v.value0));
            };
            if (v instanceof Deep) {
                var l = Data_Traversable.traverse(traversableFingerTree)(dictApplicative)(Data_Traversable.traverse(traversableNode)(dictApplicative)(f))(Data_Lazy.force(v.value2));
                var kl = Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude["const"])(l);
                return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Deep.create(v.value0))(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(f)(v.value1)))(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Lazy.defer)(kl)))(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(f)(v.value3));
            };
            throw new Error("Failed pattern match: " + [ f.constructor.name, v.constructor.name ]);
        };
    };
});
var deep = function (dictMonoid) {
    return function (dictMeasured) {
        return function (pr) {
            return function (m) {
                return function (sf) {
                    return new Deep(Data_Lazy.defer(function (v) {
                        return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredArray(dictMonoid)(dictMeasured))(pr))(Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredLazy(dictMonoid)(measuredFingerTree(dictMonoid)(measuredNode)))(m))(Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredArray(dictMonoid)(dictMeasured))(sf)));
                    }), pr, m, sf);
                };
            };
        };
    };
};
var snoc = function (dictMonoid) {
    return function (dictMeasured) {
        return function (v) {
            return function (a) {
                if (v instanceof Empty) {
                    return new Single(a);
                };
                if (v instanceof Single) {
                    return deep(dictMonoid)(dictMeasured)([ v.value0 ])(lazyEmpty)([ a ]);
                };
                if (v instanceof Deep && v.value3.length === 4) {
                    var forcedM = Data_Lazy.force(v.value2);
                    return deep(dictMonoid)(dictMeasured)(v.value1)(Data_Lazy.defer(function (v1) {
                        return snoc(dictMonoid)(measuredNode)(forcedM)(node3(dictMonoid)(dictMeasured)(v.value3[0])(v.value3[1])(v.value3[2]));
                    }))([ v.value3[3], a ]);
                };
                if (v instanceof Deep) {
                    return deep(dictMonoid)(dictMeasured)(v.value1)(v.value2)(Data_Array.snoc(v.value3)(a));
                };
                throw new Error("Failed pattern match: " + [ v.constructor.name, a.constructor.name ]);
            };
        };
    };
};
var snocAll = function (dictMonoid) {
    return function (dictMeasured) {
        return function (dictFoldable) {
            return Data_Foldable.foldl(dictFoldable)(snoc(dictMonoid)(dictMeasured));
        };
    };
};
var toFingerTree = function (dictMonoid) {
    return function (dictMeasured) {
        return function (dictFoldable) {
            return function (s) {
                return snocAll(dictMonoid)(dictMeasured)(dictFoldable)(Empty.value)(s);
            };
        };
    };
};
var viewL = function (dictMonoid) {
    return function (dictMeasured) {
        return function (v) {
            if (v instanceof Empty) {
                return NilL.value;
            };
            if (v instanceof Single) {
                return new ConsL(v.value0, lazyEmpty);
            };
            if (v instanceof Deep) {
                return new ConsL(headDigit(v.value1), Data_Lazy.defer(function (v1) {
                    return deepL(dictMonoid)(dictMeasured)(tailDigit(v.value1))(v.value2)(v.value3);
                }));
            };
            throw new Error("Failed pattern match: " + [ v.constructor.name ]);
        };
    };
};
var deepL = function (dictMonoid) {
    return function (dictMeasured) {
        return function (v) {
            return function (m) {
                return function (sf) {
                    if (v.length === 0) {
                        var $275 = viewL(dictMonoid)(measuredNode)(Data_Lazy.force(m));
                        if ($275 instanceof NilL) {
                            return toFingerTree(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(sf);
                        };
                        if ($275 instanceof ConsL) {
                            return deep(dictMonoid)(dictMeasured)(nodeToDigit($275.value0))($275.value1)(sf);
                        };
                        throw new Error("Failed pattern match: " + [ $275.constructor.name ]);
                    };
                    return deep(dictMonoid)(dictMeasured)(v)(m)(sf);
                };
            };
        };
    };
};
var eqFingerTree = function (__copy_dictMonoid) {
    return function (__copy_dictMeasured) {
        return function (__copy_dictEq) {
            return function (__copy_xs) {
                return function (__copy_ys) {
                    var dictMonoid = __copy_dictMonoid;
                    var dictMeasured = __copy_dictMeasured;
                    var dictEq = __copy_dictEq;
                    var xs = __copy_xs;
                    var ys = __copy_ys;
                    tco: while (true) {
                        var $278 = new Data_Tuple.Tuple(viewL(dictMonoid)(dictMeasured)(xs), viewL(dictMonoid)(dictMeasured)(ys));
                        if ($278.value0 instanceof NilL && $278.value1 instanceof NilL) {
                            return true;
                        };
                        if ($278.value0 instanceof NilL) {
                            return false;
                        };
                        if ($278.value1 instanceof NilL) {
                            return false;
                        };
                        if ($278.value0 instanceof ConsL && $278.value1 instanceof ConsL) {
                            var $285 = Prelude["=="](dictEq)($278.value0.value0)($278.value1.value0);
                            if ($285) {
                                var ys$prime__ALT = Data_Lazy.force($278.value1.value1);
                                var xs$prime__ALT = Data_Lazy.force($278.value0.value1);
                                var __tco_dictMonoid = dictMonoid;
                                var __tco_dictMeasured = dictMeasured;
                                var __tco_dictEq = dictEq;
                                dictMonoid = __tco_dictMonoid;
                                dictMeasured = __tco_dictMeasured;
                                dictEq = __tco_dictEq;
                                xs = xs$prime__ALT;
                                ys = ys$prime__ALT;
                                continue tco;
                            };
                            if (!$285) {
                                return false;
                            };
                            throw new Error("Failed pattern match: " + [ $285.constructor.name ]);
                        };
                        throw new Error("Failed pattern match: " + [ $278.constructor.name ]);
                    };
                };
            };
        };
    };
};
var head = function (dictMonoid) {
    return function (dictMeasured) {
        return function (x) {
            var $292 = viewL(dictMonoid)(dictMeasured)(x);
            if ($292 instanceof ConsL) {
                return new Data_Maybe.Just($292.value0);
            };
            if ($292 instanceof NilL) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match at Data.FingerTree line 320, column 1 - line 321, column 1: " + [ $292.constructor.name ]);
        };
    };
};
var isEmpty = function (dictMonoid) {
    return function (dictMeasured) {
        return function (x) {
            var $295 = viewL(dictMonoid)(dictMeasured)(x);
            if ($295 instanceof NilL) {
                return true;
            };
            if ($295 instanceof ConsL) {
                return false;
            };
            throw new Error("Failed pattern match at Data.FingerTree line 315, column 1 - line 316, column 1: " + [ $295.constructor.name ]);
        };
    };
};
var tail = function (dictMonoid) {
    return function (dictMeasured) {
        return function (x) {
            var $298 = viewL(dictMonoid)(dictMeasured)(x);
            if ($298 instanceof ConsL) {
                return new Data_Maybe.Just(Data_Lazy.force($298.value1));
            };
            if ($298 instanceof NilL) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match at Data.FingerTree line 325, column 1 - line 327, column 1: " + [ $298.constructor.name ]);
        };
    };
};
var unfoldLeft = function (dictUnfoldable) {
    return function (dictMonoid) {
        return function (dictMeasured) {
            var step = function (tree) {
                var $301 = viewL(dictMonoid)(dictMeasured)(tree);
                if ($301 instanceof ConsL) {
                    return new Data_Maybe.Just(new Data_Tuple.Tuple($301.value0, Data_Lazy.force($301.value1)));
                };
                if ($301 instanceof NilL) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at Data.FingerTree line 454, column 3 - line 458, column 1: " + [ $301.constructor.name ]);
            };
            return Data_Unfoldable.unfoldr(dictUnfoldable)(step);
        };
    };
};
var viewR = function (dictMonoid) {
    return function (dictMeasured) {
        return function (v) {
            if (v instanceof Empty) {
                return NilR.value;
            };
            if (v instanceof Single) {
                return new SnocR(lazyEmpty, v.value0);
            };
            if (v instanceof Deep) {
                return new SnocR(Data_Lazy.defer(function (v1) {
                    return deepR(dictMonoid)(dictMeasured)(v.value1)(v.value2)(initDigit(v.value3));
                }), lastDigit(v.value3));
            };
            throw new Error("Failed pattern match: " + [ v.constructor.name ]);
        };
    };
};
var deepR = function (dictMonoid) {
    return function (dictMeasured) {
        return function (pr) {
            return function (m) {
                return function (v) {
                    if (v.length === 0) {
                        var $314 = viewR(dictMonoid)(measuredNode)(Data_Lazy.force(m));
                        if ($314 instanceof NilR) {
                            return toFingerTree(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(pr);
                        };
                        if ($314 instanceof SnocR) {
                            return deep(dictMonoid)(dictMeasured)(pr)($314.value0)(nodeToDigit($314.value1));
                        };
                        throw new Error("Failed pattern match: " + [ $314.constructor.name ]);
                    };
                    return deep(dictMonoid)(dictMeasured)(pr)(m)(v);
                };
            };
        };
    };
};
var init = function (dictMonoid) {
    return function (dictMeasured) {
        return function (x) {
            var $317 = viewR(dictMonoid)(dictMeasured)(x);
            if ($317 instanceof SnocR) {
                return new Data_Maybe.Just(Data_Lazy.force($317.value0));
            };
            if ($317 instanceof NilR) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match at Data.FingerTree line 358, column 1 - line 360, column 1: " + [ $317.constructor.name ]);
        };
    };
};
var last = function (dictMonoid) {
    return function (dictMeasured) {
        return function (x) {
            var $320 = viewR(dictMonoid)(dictMeasured)(x);
            if ($320 instanceof SnocR) {
                return new Data_Maybe.Just($320.value1);
            };
            if ($320 instanceof NilR) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match at Data.FingerTree line 353, column 1 - line 354, column 1: " + [ $320.constructor.name ]);
        };
    };
};
var unfoldRight = function (dictUnfoldable) {
    return function (dictMonoid) {
        return function (dictMeasured) {
            var step = function (tree) {
                var $323 = viewR(dictMonoid)(dictMeasured)(tree);
                if ($323 instanceof SnocR) {
                    return new Data_Maybe.Just(new Data_Tuple.Tuple($323.value1, Data_Lazy.force($323.value0)));
                };
                if ($323 instanceof NilR) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at Data.FingerTree line 462, column 3 - line 466, column 1: " + [ $323.constructor.name ]);
            };
            return Data_Unfoldable.unfoldr(dictUnfoldable)(step);
        };
    };
};
var unsafeSplitTree = function (dictMonoid) {
    return function (dictMeasured) {
        return function (p) {
            return function (i) {
                return function (v) {
                    if (v instanceof Single) {
                        return new LazySplit(lazyEmpty, v.value0, lazyEmpty);
                    };
                    if (v instanceof Empty) {
                        return Control_Monad_Eff_Exception_Unsafe.unsafeThrow("Data.FingerTree.unsafeSplitTree: Empty");
                    };
                    if (v instanceof Deep) {
                        var vpr = Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(i)(Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredArray(dictMonoid)(dictMeasured))(v.value1));
                        var $330 = p(vpr);
                        if ($330) {
                            var $331 = unsafeSplitDigit(dictMonoid)(dictMeasured)(p)(i)(v.value1);
                            return new LazySplit(Data_Lazy.defer(function (v1) {
                                return toFingerTree(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)($331.value0);
                            }), $331.value1, Data_Lazy.defer(function (v1) {
                                return deepL(dictMonoid)(dictMeasured)($331.value2)(v.value2)(v.value3);
                            }));
                        };
                        if (!$330) {
                            var vm = Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(vpr)(Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredLazy(dictMonoid)(measuredFingerTree(dictMonoid)(measuredNode)))(v.value2));
                            var $337 = p(vm);
                            if ($337) {
                                var $338 = unsafeSplitTree(dictMonoid)(measuredNode)(p)(vpr)(Data_Lazy.force(v.value2));
                                var $339 = unsafeSplitDigit(dictMonoid)(dictMeasured)(p)(Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(vpr)(Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredLazy(dictMonoid)(measuredFingerTree(dictMonoid)(measuredNode)))($338.value0)))(nodeToDigit($338.value1));
                                return new LazySplit(Data_Lazy.defer(function (v1) {
                                    return deepR(dictMonoid)(dictMeasured)(v.value1)($338.value0)($339.value0);
                                }), $339.value1, Data_Lazy.defer(function (v1) {
                                    return deepL(dictMonoid)(dictMeasured)($339.value2)($338.value2)(v.value3);
                                }));
                            };
                            if (!$337) {
                                var $348 = unsafeSplitDigit(dictMonoid)(dictMeasured)(p)(vm)(v.value3);
                                return new LazySplit(Data_Lazy.defer(function (v1) {
                                    return deepR(dictMonoid)(dictMeasured)(v.value1)(v.value2)($348.value0);
                                }), $348.value1, Data_Lazy.defer(function (v1) {
                                    return toFingerTree(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)($348.value2);
                                }));
                            };
                            throw new Error("Failed pattern match: " + [ $337.constructor.name ]);
                        };
                        throw new Error("Failed pattern match: " + [ $330.constructor.name ]);
                    };
                    throw new Error("Failed pattern match: " + [ p.constructor.name, i.constructor.name, v.constructor.name ]);
                };
            };
        };
    };
};
var cons = function (dictMonoid) {
    return function (dictMeasured) {
        return function (a) {
            return function (v) {
                if (v instanceof Empty) {
                    return new Single(a);
                };
                if (v instanceof Single) {
                    return deep(dictMonoid)(dictMeasured)([ a ])(lazyEmpty)([ v.value0 ]);
                };
                if (v instanceof Deep && v.value1.length === 4) {
                    var forcedM = Data_Lazy.force(v.value2);
                    return deep(dictMonoid)(dictMeasured)([ a, v.value1[0] ])(Data_Lazy.defer(function (v1) {
                        return cons(dictMonoid)(measuredNode)(node3(dictMonoid)(dictMeasured)(v.value1[1])(v.value1[2])(v.value1[3]))(forcedM);
                    }))(v.value3);
                };
                if (v instanceof Deep) {
                    return deep(dictMonoid)(dictMeasured)(Data_Array.cons(a)(v.value1))(v.value2)(v.value3);
                };
                throw new Error("Failed pattern match: " + [ a.constructor.name, v.constructor.name ]);
            };
        };
    };
};
var consAll = function (dictMonoid) {
    return function (dictMeasured) {
        return function (dictFoldable) {
            return Prelude.flip(Data_Foldable.foldr(dictFoldable)(cons(dictMonoid)(dictMeasured)));
        };
    };
};
var filter = function (dictMonoid) {
    return function (dictMeasured) {
        return function (p) {
            return Data_Foldable.foldr(foldableFingerTree)(function (x) {
                return function (acc) {
                    var $374 = p(x);
                    if ($374) {
                        return cons(dictMonoid)(dictMeasured)(x)(acc);
                    };
                    if (!$374) {
                        return acc;
                    };
                    throw new Error("Failed pattern match at Data.FingerTree line 446, column 1 - line 448, column 1: " + [ $374.constructor.name ]);
                };
            })(Empty.value);
        };
    };
};
var split = function (dictMonoid) {
    return function (dictMeasured) {
        return function (p) {
            return function (v) {
                if (v instanceof Empty) {
                    return new Data_Tuple.Tuple(lazyEmpty, lazyEmpty);
                };
                var $377 = p(Data_Sequence_Internal.measure(measuredFingerTree(dictMonoid)(dictMeasured))(v));
                if ($377) {
                    var $378 = unsafeSplitTree(dictMonoid)(dictMeasured)(p)(Data_Monoid.mempty(dictMonoid))(v);
                    return new Data_Tuple.Tuple($378.value0, Data_Lazy.defer(function (v1) {
                        return cons(dictMonoid)(dictMeasured)($378.value1)(Data_Lazy.force($378.value2));
                    }));
                };
                if (!$377) {
                    return new Data_Tuple.Tuple(Data_Lazy.defer(function (v1) {
                        return v;
                    }), lazyEmpty);
                };
                throw new Error("Failed pattern match at Data.FingerTree line 432, column 1 - line 436, column 1: " + [ $377.constructor.name ]);
            };
        };
    };
};
var compareFingerTree = function (__copy_dictMonoid) {
    return function (__copy_dictMeasured) {
        return function (__copy_dictOrd) {
            return function (__copy_xs) {
                return function (__copy_ys) {
                    var dictMonoid = __copy_dictMonoid;
                    var dictMeasured = __copy_dictMeasured;
                    var dictOrd = __copy_dictOrd;
                    var xs = __copy_xs;
                    var ys = __copy_ys;
                    tco: while (true) {
                        var $384 = new Data_Tuple.Tuple(viewL(dictMonoid)(dictMeasured)(xs), viewL(dictMonoid)(dictMeasured)(ys));
                        if ($384.value0 instanceof NilL && $384.value1 instanceof NilL) {
                            return Prelude.EQ.value;
                        };
                        if ($384.value0 instanceof NilL) {
                            return Prelude.LT.value;
                        };
                        if ($384.value1 instanceof NilL) {
                            return Prelude.GT.value;
                        };
                        if ($384.value0 instanceof ConsL && $384.value1 instanceof ConsL) {
                            var $391 = Prelude.compare(dictOrd)($384.value0.value0)($384.value1.value0);
                            if ($391 instanceof Prelude.EQ) {
                                var ys$prime__ALT = Data_Lazy.force($384.value1.value1);
                                var xs$prime__ALT = Data_Lazy.force($384.value0.value1);
                                var __tco_dictMonoid = dictMonoid;
                                var __tco_dictMeasured = dictMeasured;
                                var __tco_dictOrd = dictOrd;
                                dictMonoid = __tco_dictMonoid;
                                dictMeasured = __tco_dictMeasured;
                                dictOrd = __tco_dictOrd;
                                xs = xs$prime__ALT;
                                ys = ys$prime__ALT;
                                continue tco;
                            };
                            return $391;
                        };
                        throw new Error("Failed pattern match: " + [ $384.constructor.name ]);
                    };
                };
            };
        };
    };
};
var app3 = function (dictMonoid) {
    return function (dictMeasured) {
        return function (v) {
            return function (ts) {
                return function (v1) {
                    if (v instanceof Empty) {
                        return consAll(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(ts)(v1);
                    };
                    if (v1 instanceof Empty) {
                        return snocAll(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(v)(ts);
                    };
                    if (v instanceof Single) {
                        return cons(dictMonoid)(dictMeasured)(v.value0)(consAll(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(ts)(v1));
                    };
                    if (v1 instanceof Single) {
                        return snoc(dictMonoid)(dictMeasured)(snocAll(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(v)(ts))(v1.value0);
                    };
                    if (v instanceof Deep && v1 instanceof Deep) {
                        var computeM__ALT = function (v2) {
                            return app3(dictMonoid)(measuredNode)(Data_Lazy.force(v.value2))(nodes(dictMonoid)(dictMeasured)(Prelude["<>"](Prelude.semigroupArray)(v.value3)(Prelude["<>"](Prelude.semigroupArray)(ts)(v1.value1))))(Data_Lazy.force(v1.value2));
                        };
                        return deep(dictMonoid)(dictMeasured)(v.value1)(Data_Lazy.defer(computeM__ALT))(v1.value3);
                    };
                    throw new Error("Failed pattern match: " + [ v.constructor.name, ts.constructor.name, v1.constructor.name ]);
                };
            };
        };
    };
};
var append = function (dictMonoid) {
    return function (dictMeasured) {
        return function (xs) {
            return function (ys) {
                return app3(dictMonoid)(dictMeasured)(xs)([  ])(ys);
            };
        };
    };
};
var semigroupFingerTree = function (dictMonoid) {
    return function (dictMeasured) {
        return new Prelude.Semigroup(append(dictMonoid)(dictMeasured));
    };
};
module.exports = {
    LazySplit: LazySplit,
    Split: Split,
    NilR: NilR,
    SnocR: SnocR,
    NilL: NilL,
    ConsL: ConsL,
    Empty: Empty,
    Single: Single,
    Deep: Deep,
    Node2: Node2,
    Node3: Node3,
    fullyForce: fullyForce,
    unfoldRight: unfoldRight,
    unfoldLeft: unfoldLeft,
    filter: filter,
    split: split,
    unsafeSplitTree: unsafeSplitTree,
    unsafeSplitDigit: unsafeSplitDigit,
    append: append,
    nodes: nodes,
    app3: app3,
    init: init,
    last: last,
    deepR: deepR,
    viewR: viewR,
    initDigit: initDigit,
    lastDigit: lastDigit,
    tail: tail,
    head: head,
    isEmpty: isEmpty,
    deepL: deepL,
    viewL: viewL,
    tailDigit: tailDigit,
    headDigit: headDigit,
    toFingerTree: toFingerTree,
    snocAll: snocAll,
    consAll: consAll,
    snoc: snoc,
    cons: cons,
    compareFingerTree: compareFingerTree,
    eqFingerTree: eqFingerTree,
    deep: deep,
    lazyEmpty: lazyEmpty,
    nodeToDigit: nodeToDigit,
    node3: node3,
    node2: node2,
    showNode: showNode,
    functorNode: functorNode,
    foldableNode: foldableNode,
    traversableNode: traversableNode,
    measuredNode: measuredNode,
    showFingerTree: showFingerTree,
    semigroupFingerTree: semigroupFingerTree,
    functorFingerTree: functorFingerTree,
    foldableFingerTree: foldableFingerTree,
    traversableFingerTree: traversableFingerTree,
    measuredFingerTree: measuredFingerTree,
    functorViewL: functorViewL
};
