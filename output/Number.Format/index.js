// Generated by psc version 0.8.0.0
"use strict";
var Control_Monad_Eff = require("Control.Monad.Eff");
var Control_Monad_Eff_Exception = require("Control.Monad.Eff.Exception");
var Data_Maybe = require("Data.Maybe");
var Number_Format_Unsafe = require("Number.Format.Unsafe");
var Prelude = require("Prelude");
var errorAsNothing = Control_Monad_Eff_Exception.catchException(function ($0) {
    return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude["const"](Data_Maybe.Nothing.value)($0));
});
var toExponential = function (scale) {
    return function (num) {
        return Control_Monad_Eff.runPure(errorAsNothing(Prelude["<$>"](Control_Monad_Eff.functorEff)(Data_Maybe.Just.create)(Number_Format_Unsafe.unsafeToExponential(scale)(num))));
    };
};
var toFixed = function (scale) {
    return function (num) {
        return Control_Monad_Eff.runPure(errorAsNothing(Prelude["<$>"](Control_Monad_Eff.functorEff)(Data_Maybe.Just.create)(Number_Format_Unsafe.unsafeToFixed(scale)(num))));
    };
};
var toPrecision = function (prec) {
    return function (num) {
        return Control_Monad_Eff.runPure(errorAsNothing(Prelude["<$>"](Control_Monad_Eff.functorEff)(Data_Maybe.Just.create)(Number_Format_Unsafe.unsafeToPrecision(prec)(num))));
    };
};
var toString = function (radix) {
    return function (num) {
        return Control_Monad_Eff.runPure(errorAsNothing(Prelude["<$>"](Control_Monad_Eff.functorEff)(Data_Maybe.Just.create)(Number_Format_Unsafe.unsafeToString(radix)(num))));
    };
};
module.exports = {
    toString: toString, 
    toPrecision: toPrecision, 
    toFixed: toFixed, 
    toExponential: toExponential
};
