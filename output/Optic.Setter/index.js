// Generated by psc version 0.8.0.0
"use strict";
var Data_Functor_Contravariant = require("Data.Functor.Contravariant");
var Data_Identity = require("Data.Identity");
var Data_Maybe = require("Data.Maybe");
var Data_Profunctor = require("Data.Profunctor");
var Optic_Internal_Setter = require("Optic.Internal.Setter");
var Optic_Types = require("Optic.Types");
var Prelude = require("Prelude");
var sets = function (dictProfunctor) {
    return function (dictProfunctor1) {
        return function (dictSettable) {
            return function (pab2qst) {
                return Prelude[">>>"](Prelude.semigroupoidFn)(Optic_Internal_Setter.untaintedDot(dictSettable)(dictProfunctor))(Prelude[">>>"](Prelude.semigroupoidFn)(pab2qst)(Optic_Internal_Setter.taintedDot(dictSettable)(dictProfunctor1)));
            };
        };
    };
};
var set$prime = function (sa) {
    return function (a) {
        return function ($19) {
            return Data_Identity.runIdentity(sa(function ($20) {
                return Data_Identity.Identity(Prelude["const"](a)($20));
            })($19));
        };
    };
};
var set = function (stab) {
    return function (b) {
        return function ($21) {
            return Data_Identity.runIdentity(stab(function ($22) {
                return Data_Identity.Identity(Prelude["const"](b)($22));
            })($21));
        };
    };
};
var $dot$tilde = set;
var $qmark$tilde = function (stab) {
    return function (a) {
        return set(stab)(new Data_Maybe.Just(a));
    };
};
var over = function (dictProfunctor) {
    return function (pstab) {
        return function (pab) {
            return function ($23) {
                return Data_Identity.runIdentity(pstab(Data_Profunctor.rmap(dictProfunctor)(Data_Identity.Identity)(pab))($23));
            };
        };
    };
};
var $percent$tilde = function (dictProfunctor) {
    return over(dictProfunctor);
};
var $amp$amp$tilde = function (dictBooleanAlgebra) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorFn)(staa)(Prelude.flip(Prelude["&&"](dictBooleanAlgebra))(a));
        };
    };
};
var $times$tilde = function (dictSemiring) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorFn)(staa)(Prelude.flip(Prelude["*"](dictSemiring))(a));
        };
    };
};
var $plus$plus$tilde = function (dictSemigroup) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorFn)(staa)(Prelude.flip(Prelude["++"](dictSemigroup))(a));
        };
    };
};
var $plus$tilde = function (dictSemiring) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorFn)(staa)(Prelude.flip(Prelude["+"](dictSemiring))(a));
        };
    };
};
var $minus$tilde = function (dictRing) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorFn)(staa)(Prelude.flip(Prelude["-"](dictRing))(a));
        };
    };
};
var $div$div$tilde = function (dictDivisionRing) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorFn)(staa)(Prelude.flip(Prelude["/"](dictDivisionRing["__superclass_Prelude.ModuloSemiring_1"]()))(a));
        };
    };
};
var $less$greater$tilde = function (dictSemigroup) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorFn)(staa)(Prelude.flip(Prelude["<>"](dictSemigroup))(a));
        };
    };
};
var $bar$bar$tilde = function (dictBooleanAlgebra) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorFn)(staa)(Prelude.flip(Prelude["||"](dictBooleanAlgebra))(a));
        };
    };
};
var mapped = function (dictFunctor) {
    return function (dictSettable) {
        return sets(Data_Profunctor.profunctorFn)(Data_Profunctor.profunctorFn)(dictSettable)(Prelude["<$>"](dictFunctor));
    };
};
var contramapped = function (dictContravariant) {
    return function (dictSettable) {
        return sets(Data_Profunctor.profunctorFn)(Data_Profunctor.profunctorFn)(dictSettable)(Data_Functor_Contravariant[">$<"](dictContravariant));
    };
};
var argument = function (dictProfunctor) {
    return function (dictSettable) {
        return sets(Data_Profunctor.profunctorFn)(Data_Profunctor.profunctorFn)(dictSettable)(Data_Profunctor.lmap(dictProfunctor));
    };
};
module.exports = {
    sets: sets, 
    "set'": set$prime, 
    set: set, 
    over: over, 
    mapped: mapped, 
    contramapped: contramapped, 
    argument: argument, 
    "?~": $qmark$tilde, 
    "++~": $plus$plus$tilde, 
    "<>~": $less$greater$tilde, 
    "&&~": $amp$amp$tilde, 
    "||~": $bar$bar$tilde, 
    "//~": $div$div$tilde, 
    "*~": $times$tilde, 
    "-~": $minus$tilde, 
    "+~": $plus$tilde, 
    ".~": $dot$tilde, 
    "%~": $percent$tilde
};
