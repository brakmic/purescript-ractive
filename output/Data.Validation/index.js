// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Invalid = (function () {
    function Invalid(value0) {
        this.value0 = value0;
    };
    Invalid.create = function (value0) {
        return new Invalid(value0);
    };
    return Invalid;
})();
var Valid = (function () {
    function Valid(value0) {
        this.value0 = value0;
    };
    Valid.create = function (value0) {
        return new Valid(value0);
    };
    return Valid;
})();
var showV = function (dictShow) {
    return function (dictShow1) {
        return new Prelude.Show(function (v) {
            if (v instanceof Invalid) {
                return "Invalid (" + (Prelude.show(dictShow)(v.value0) + ")");
            };
            if (v instanceof Valid) {
                return "Valid (" + (Prelude.show(dictShow1)(v.value0) + ")");
            };
            throw new Error("Failed pattern match at Data.Validation line 47, column 1 - line 51, column 1: " + [ v.constructor.name ]);
        });
    };
};
var runV = function (f) {
    return function (g) {
        return function (v) {
            if (v instanceof Invalid) {
                return f(v.value0);
            };
            if (v instanceof Valid) {
                return g(v.value0);
            };
            throw new Error("Failed pattern match at Data.Validation line 38, column 1 - line 39, column 1: " + [ f.constructor.name, g.constructor.name, v.constructor.name ]);
        };
    };
};
var isValid = function (v) {
    if (v instanceof Valid) {
        return true;
    };
    return false;
};
var invalid = Invalid.create;
var functorV = new Prelude.Functor(function (f) {
    return function (v) {
        if (v instanceof Invalid) {
            return new Invalid(v.value0);
        };
        if (v instanceof Valid) {
            return new Valid(f(v.value0));
        };
        throw new Error("Failed pattern match at Data.Validation line 51, column 1 - line 55, column 1: " + [ f.constructor.name, v.constructor.name ]);
    };
});
var applyV = function (dictSemigroup) {
    return new Prelude.Apply(function () {
        return functorV;
    }, function (v) {
        return function (v1) {
            if (v instanceof Invalid && v1 instanceof Invalid) {
                return new Invalid(Prelude["<>"](dictSemigroup)(v.value0)(v1.value0));
            };
            if (v instanceof Invalid) {
                return new Invalid(v.value0);
            };
            if (v1 instanceof Invalid) {
                return new Invalid(v1.value0);
            };
            if (v instanceof Valid && v1 instanceof Valid) {
                return new Valid(v.value0(v1.value0));
            };
            throw new Error("Failed pattern match at Data.Validation line 55, column 1 - line 61, column 1: " + [ v.constructor.name, v1.constructor.name ]);
        };
    });
};
var applicativeV = function (dictSemigroup) {
    return new Prelude.Applicative(function () {
        return applyV(dictSemigroup);
    }, Valid.create);
};
module.exports = {
    isValid: isValid, 
    runV: runV, 
    invalid: invalid, 
    showV: showV, 
    functorV: functorV, 
    applyV: applyV, 
    applicativeV: applicativeV
};
