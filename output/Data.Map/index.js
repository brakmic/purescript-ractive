// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Data_Foldable = require("Data.Foldable");
var Data_List = require("Data.List");
var Data_Maybe = require("Data.Maybe");
var Data_Maybe_Unsafe = require("Data.Maybe.Unsafe");
var Data_Monoid = require("Data.Monoid");
var Data_Traversable = require("Data.Traversable");
var Data_Tuple = require("Data.Tuple");
var Leaf = (function () {
    function Leaf() {

    };
    Leaf.value = new Leaf();
    return Leaf;
})();
var Two = (function () {
    function Two(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Two.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Two(value0, value1, value2, value3);
                };
            };
        };
    };
    return Two;
})();
var Three = (function () {
    function Three(value0, value1, value2, value3, value4, value5, value6) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
        this.value6 = value6;
    };
    Three.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return function (value6) {
                                return new Three(value0, value1, value2, value3, value4, value5, value6);
                            };
                        };
                    };
                };
            };
        };
    };
    return Three;
})();
var TwoLeft = (function () {
    function TwoLeft(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    TwoLeft.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new TwoLeft(value0, value1, value2);
            };
        };
    };
    return TwoLeft;
})();
var TwoRight = (function () {
    function TwoRight(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    TwoRight.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new TwoRight(value0, value1, value2);
            };
        };
    };
    return TwoRight;
})();
var ThreeLeft = (function () {
    function ThreeLeft(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
    };
    ThreeLeft.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                        };
                    };
                };
            };
        };
    };
    return ThreeLeft;
})();
var ThreeMiddle = (function () {
    function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
    };
    ThreeMiddle.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                        };
                    };
                };
            };
        };
    };
    return ThreeMiddle;
})();
var ThreeRight = (function () {
    function ThreeRight(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
    };
    ThreeRight.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return new ThreeRight(value0, value1, value2, value3, value4, value5);
                        };
                    };
                };
            };
        };
    };
    return ThreeRight;
})();
var KickUp = (function () {
    function KickUp(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    KickUp.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new KickUp(value0, value1, value2, value3);
                };
            };
        };
    };
    return KickUp;
})();
var values = function (v) {
    if (v instanceof Leaf) {
        return Data_List.Nil.value;
    };
    if (v instanceof Two) {
        return Prelude["++"](Data_List.semigroupList)(values(v.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(v.value2))(values(v.value3)));
    };
    if (v instanceof Three) {
        return Prelude["++"](Data_List.semigroupList)(values(v.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(v.value2))(Prelude["++"](Data_List.semigroupList)(values(v.value3))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(v.value5))(values(v.value6)))));
    };
    throw new Error("Failed pattern match: " + [ v.constructor.name ]);
};
var toList = function (v) {
    if (v instanceof Leaf) {
        return Data_List.Nil.value;
    };
    if (v instanceof Two) {
        return Prelude["++"](Data_List.semigroupList)(toList(v.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(new Data_Tuple.Tuple(v.value1, v.value2)))(toList(v.value3)));
    };
    if (v instanceof Three) {
        return Prelude["++"](Data_List.semigroupList)(toList(v.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(new Data_Tuple.Tuple(v.value1, v.value2)))(Prelude["++"](Data_List.semigroupList)(toList(v.value3))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(new Data_Tuple.Tuple(v.value4, v.value5)))(toList(v.value6)))));
    };
    throw new Error("Failed pattern match: " + [ v.constructor.name ]);
};
var size = function ($596) {
    return Data_List.length(values($596));
};
var singleton = function (k) {
    return function (v) {
        return new Two(Leaf.value, k, v, Leaf.value);
    };
};
var showTree = function (dictShow) {
    return function (dictShow1) {
        return function (v) {
            if (v instanceof Leaf) {
                return "Leaf";
            };
            if (v instanceof Two) {
                return "Two (" + (showTree(dictShow)(dictShow1)(v.value0) + (") (" + (Prelude.show(dictShow)(v.value1) + (") (" + (Prelude.show(dictShow1)(v.value2) + (") (" + (showTree(dictShow)(dictShow1)(v.value3) + ")")))))));
            };
            if (v instanceof Three) {
                return "Three (" + (showTree(dictShow)(dictShow1)(v.value0) + (") (" + (Prelude.show(dictShow)(v.value1) + (") (" + (Prelude.show(dictShow1)(v.value2) + (") (" + (showTree(dictShow)(dictShow1)(v.value3) + (") (" + (Prelude.show(dictShow)(v.value4) + (") (" + (Prelude.show(dictShow1)(v.value5) + (") (" + (showTree(dictShow)(dictShow1)(v.value6) + ")")))))))))))));
            };
            throw new Error("Failed pattern match: " + [ v.constructor.name ]);
        };
    };
};
var showMap = function (dictShow) {
    return function (dictShow1) {
        return new Prelude.Show(function (m) {
            return "fromList " + Prelude.show(Data_List.showList(Data_Tuple.showTuple(dictShow)(dictShow1)))(toList(m));
        });
    };
};
var lookup = function (__copy_dictOrd) {
    return function (__copy_k) {
        return function (__copy_v) {
            var dictOrd = __copy_dictOrd;
            var k = __copy_k;
            var v = __copy_v;
            tco: while (true) {
                if (v instanceof Leaf) {
                    return Data_Maybe.Nothing.value;
                };
                var k1 = k;
                if (v instanceof Two && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v.value1)) {
                    return new Data_Maybe.Just(v.value2);
                };
                var k1 = k;
                if (v instanceof Two && Prelude["<"](dictOrd)(k1)(v.value1)) {
                    var __tco_dictOrd = dictOrd;
                    var __tco_v = v.value0;
                    dictOrd = __tco_dictOrd;
                    k = k1;
                    v = __tco_v;
                    continue tco;
                };
                var k1 = k;
                if (v instanceof Two) {
                    var __tco_dictOrd = dictOrd;
                    var __tco_v = v.value3;
                    dictOrd = __tco_dictOrd;
                    k = k1;
                    v = __tco_v;
                    continue tco;
                };
                var k1 = k;
                if (v instanceof Three && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v.value1)) {
                    return new Data_Maybe.Just(v.value2);
                };
                var k1 = k;
                if (v instanceof Three && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v.value4)) {
                    return new Data_Maybe.Just(v.value5);
                };
                var k1 = k;
                if (v instanceof Three && Prelude["<"](dictOrd)(k1)(v.value1)) {
                    var __tco_dictOrd = dictOrd;
                    var __tco_v = v.value0;
                    dictOrd = __tco_dictOrd;
                    k = k1;
                    v = __tco_v;
                    continue tco;
                };
                var k1 = k;
                if (v instanceof Three && (Prelude["<"](dictOrd)(v.value1)(k1) && Prelude["<="](dictOrd)(k1)(v.value4))) {
                    var __tco_dictOrd = dictOrd;
                    var __tco_v = v.value3;
                    dictOrd = __tco_dictOrd;
                    k = k1;
                    v = __tco_v;
                    continue tco;
                };
                if (v instanceof Three) {
                    var __tco_dictOrd = dictOrd;
                    var __tco_k = k;
                    var __tco_v = v.value6;
                    dictOrd = __tco_dictOrd;
                    k = __tco_k;
                    v = __tco_v;
                    continue tco;
                };
                throw new Error("Failed pattern match: " + [ k.constructor.name, v.constructor.name ]);
            };
        };
    };
};
var member = function (dictOrd) {
    return function (k) {
        return function (m) {
            return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
        };
    };
};
var keys = function (v) {
    if (v instanceof Leaf) {
        return Data_List.Nil.value;
    };
    if (v instanceof Two) {
        return Prelude["++"](Data_List.semigroupList)(keys(v.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(v.value1))(keys(v.value3)));
    };
    if (v instanceof Three) {
        return Prelude["++"](Data_List.semigroupList)(keys(v.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(v.value1))(Prelude["++"](Data_List.semigroupList)(keys(v.value3))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(v.value4))(keys(v.value6)))));
    };
    throw new Error("Failed pattern match: " + [ v.constructor.name ]);
};
var isEmpty = function (v) {
    if (v instanceof Leaf) {
        return true;
    };
    return false;
};
var functorMap = new Prelude.Functor(function (f) {
    return function (v) {
        if (v instanceof Leaf) {
            return Leaf.value;
        };
        if (v instanceof Two) {
            return new Two(Prelude.map(functorMap)(f)(v.value0), v.value1, f(v.value2), Prelude.map(functorMap)(f)(v.value3));
        };
        if (v instanceof Three) {
            return new Three(Prelude.map(functorMap)(f)(v.value0), v.value1, f(v.value2), Prelude.map(functorMap)(f)(v.value3), v.value4, f(v.value5), Prelude.map(functorMap)(f)(v.value6));
        };
        throw new Error("Failed pattern match: " + [ f.constructor.name, v.constructor.name ]);
    };
});
var fromZipper = function (__copy_dictOrd) {
    return function (__copy_v) {
        return function (__copy_v1) {
            var dictOrd = __copy_dictOrd;
            var v = __copy_v;
            var v1 = __copy_v1;
            tco: while (true) {
                if (v instanceof Data_List.Nil) {
                    return v1;
                };
                if (v instanceof Data_List.Cons && v.value0 instanceof TwoLeft) {
                    var __tco_dictOrd = dictOrd;
                    var __tco_v = v.value1;
                    var __tco_v1 = new Two(v1, v.value0.value0, v.value0.value1, v.value0.value2);
                    dictOrd = __tco_dictOrd;
                    v = __tco_v;
                    v1 = __tco_v1;
                    continue tco;
                };
                if (v instanceof Data_List.Cons && v.value0 instanceof TwoRight) {
                    var __tco_dictOrd = dictOrd;
                    var __tco_v = v.value1;
                    var __tco_v1 = new Two(v.value0.value0, v.value0.value1, v.value0.value2, v1);
                    dictOrd = __tco_dictOrd;
                    v = __tco_v;
                    v1 = __tco_v1;
                    continue tco;
                };
                if (v instanceof Data_List.Cons && v.value0 instanceof ThreeLeft) {
                    var __tco_dictOrd = dictOrd;
                    var __tco_v = v.value1;
                    var __tco_v1 = new Three(v1, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                    dictOrd = __tco_dictOrd;
                    v = __tco_v;
                    v1 = __tco_v1;
                    continue tco;
                };
                if (v instanceof Data_List.Cons && v.value0 instanceof ThreeMiddle) {
                    var __tco_dictOrd = dictOrd;
                    var __tco_v = v.value1;
                    var __tco_v1 = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v1, v.value0.value3, v.value0.value4, v.value0.value5);
                    dictOrd = __tco_dictOrd;
                    v = __tco_v;
                    v1 = __tco_v1;
                    continue tco;
                };
                if (v instanceof Data_List.Cons && v.value0 instanceof ThreeRight) {
                    var __tco_dictOrd = dictOrd;
                    var __tco_v = v.value1;
                    var __tco_v1 = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, v1);
                    dictOrd = __tco_dictOrd;
                    v = __tco_v;
                    v1 = __tco_v1;
                    continue tco;
                };
                throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
    };
};
var insert = function (dictOrd) {
    var up = function (__copy_v) {
        return function (__copy_v1) {
            var v = __copy_v;
            var v1 = __copy_v1;
            tco: while (true) {
                if (v instanceof Data_List.Nil) {
                    return new Two(v1.value0, v1.value1, v1.value2, v1.value3);
                };
                if (v instanceof Data_List.Cons && v.value0 instanceof TwoLeft) {
                    return fromZipper(dictOrd)(v.value1)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, v.value0.value0, v.value0.value1, v.value0.value2));
                };
                if (v instanceof Data_List.Cons && v.value0 instanceof TwoRight) {
                    return fromZipper(dictOrd)(v.value1)(new Three(v.value0.value0, v.value0.value1, v.value0.value2, v1.value0, v1.value1, v1.value2, v1.value3));
                };
                if (v instanceof Data_List.Cons && v.value0 instanceof ThreeLeft) {
                    var __tco_v = v.value1;
                    var __tco_v1 = new KickUp(new Two(v1.value0, v1.value1, v1.value2, v1.value3), v.value0.value0, v.value0.value1, new Two(v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5));
                    v = __tco_v;
                    v1 = __tco_v1;
                    continue tco;
                };
                if (v instanceof Data_List.Cons && v.value0 instanceof ThreeMiddle) {
                    var __tco_v = v.value1;
                    var __tco_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v.value0.value2, v1.value0), v1.value1, v1.value2, new Two(v1.value3, v.value0.value3, v.value0.value4, v.value0.value5));
                    v = __tco_v;
                    v1 = __tco_v1;
                    continue tco;
                };
                if (v instanceof Data_List.Cons && v.value0 instanceof ThreeRight) {
                    var __tco_v = v.value1;
                    var __tco_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3), v.value0.value4, v.value0.value5, new Two(v1.value0, v1.value1, v1.value2, v1.value3));
                    v = __tco_v;
                    v1 = __tco_v1;
                    continue tco;
                };
                throw new Error("Failed pattern match at Data.Map line 150, column 1 - line 151, column 1: " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
    };
    var down = function (__copy_ctx) {
        return function (__copy_k) {
            return function (__copy_v) {
                return function (__copy_v1) {
                    var ctx = __copy_ctx;
                    var k = __copy_k;
                    var v = __copy_v;
                    var v1 = __copy_v1;
                    tco: while (true) {
                        var ctx1 = ctx;
                        var k1 = k;
                        var v2 = v;
                        if (v1 instanceof Leaf) {
                            return up(ctx1)(new KickUp(Leaf.value, k1, v2, Leaf.value));
                        };
                        var ctx1 = ctx;
                        var k1 = k;
                        var v2 = v;
                        if (v1 instanceof Two && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v1.value1)) {
                            return fromZipper(dictOrd)(ctx1)(new Two(v1.value0, k1, v2, v1.value3));
                        };
                        var ctx1 = ctx;
                        var k1 = k;
                        var v2 = v;
                        if (v1 instanceof Two && Prelude["<"](dictOrd)(k1)(v1.value1)) {
                            var __tco_ctx = new Data_List.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx1);
                            var __tco_v1 = v1.value0;
                            ctx = __tco_ctx;
                            k = k1;
                            v = v2;
                            v1 = __tco_v1;
                            continue tco;
                        };
                        var ctx1 = ctx;
                        var k1 = k;
                        var v2 = v;
                        if (v1 instanceof Two) {
                            var __tco_ctx = new Data_List.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx1);
                            var __tco_v1 = v1.value3;
                            ctx = __tco_ctx;
                            k = k1;
                            v = v2;
                            v1 = __tco_v1;
                            continue tco;
                        };
                        var ctx1 = ctx;
                        var k1 = k;
                        var v2 = v;
                        if (v1 instanceof Three && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v1.value1)) {
                            return fromZipper(dictOrd)(ctx1)(new Three(v1.value0, k1, v2, v1.value3, v1.value4, v1.value5, v1.value6));
                        };
                        var ctx1 = ctx;
                        var k1 = k;
                        var v2 = v;
                        if (v1 instanceof Three && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v1.value4)) {
                            return fromZipper(dictOrd)(ctx1)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k1, v2, v1.value6));
                        };
                        var ctx1 = ctx;
                        var k1 = k;
                        var v2 = v;
                        if (v1 instanceof Three && Prelude["<"](dictOrd)(k1)(v1.value1)) {
                            var __tco_ctx = new Data_List.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx1);
                            var __tco_v1 = v1.value0;
                            ctx = __tco_ctx;
                            k = k1;
                            v = v2;
                            v1 = __tco_v1;
                            continue tco;
                        };
                        var ctx1 = ctx;
                        var k1 = k;
                        var v2 = v;
                        if (v1 instanceof Three && (Prelude["<"](dictOrd)(v1.value1)(k1) && Prelude["<="](dictOrd)(k1)(v1.value4))) {
                            var __tco_ctx = new Data_List.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx1);
                            var __tco_v1 = v1.value3;
                            ctx = __tco_ctx;
                            k = k1;
                            v = v2;
                            v1 = __tco_v1;
                            continue tco;
                        };
                        if (v1 instanceof Three) {
                            var __tco_ctx = new Data_List.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                            var __tco_k = k;
                            var __tco_v = v;
                            var __tco_v1 = v1.value6;
                            ctx = __tco_ctx;
                            k = __tco_k;
                            v = __tco_v;
                            v1 = __tco_v1;
                            continue tco;
                        };
                        throw new Error("Failed pattern match at Data.Map line 150, column 1 - line 151, column 1: " + [ ctx.constructor.name, k.constructor.name, v.constructor.name, v1.constructor.name ]);
                    };
                };
            };
        };
    };
    return down(Data_List.Nil.value);
};
var foldableMap = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (m) {
            return Data_Foldable.foldMap(Data_List.foldableList)(dictMonoid)(f)(values(m));
        };
    };
}, function (f) {
    return function (z) {
        return function (m) {
            return Data_Foldable.foldl(Data_List.foldableList)(f)(z)(values(m));
        };
    };
}, function (f) {
    return function (z) {
        return function (m) {
            return Data_Foldable.foldr(Data_List.foldableList)(f)(z)(values(m));
        };
    };
});
var eqMap = function (dictEq) {
    return function (dictEq1) {
        return new Prelude.Eq(function (m1) {
            return function (m2) {
                return Prelude["=="](Data_List.eqList(Data_Tuple.eqTuple(dictEq)(dictEq1)))(toList(m1))(toList(m2));
            };
        });
    };
};
var ordMap = function (dictOrd) {
    return function (dictOrd1) {
        return new Prelude.Ord(function () {
            return eqMap(dictOrd["__superclass_Prelude.Eq_0"]())(dictOrd1["__superclass_Prelude.Eq_0"]());
        }, function (m1) {
            return function (m2) {
                return Prelude.compare(Data_List.ordList(Data_Tuple.ordTuple(dictOrd)(dictOrd1)))(toList(m1))(toList(m2));
            };
        });
    };
};
var empty = Leaf.value;
var fromFoldable = function (dictOrd) {
    return function (dictFoldable) {
        return Data_Foldable.foldl(dictFoldable)(function (m) {
            return function (v) {
                return insert(dictOrd)(v.value0)(v.value1)(m);
            };
        })(empty);
    };
};
var fromList = function (dictOrd) {
    return fromFoldable(dictOrd)(Data_List.foldableList);
};
var $$delete = function (dictOrd) {
    var up = function (__copy_v) {
        return function (__copy_v1) {
            var v = __copy_v;
            var v1 = __copy_v1;
            tco: while (true) {
                if (v instanceof Data_List.Nil) {
                    return v1;
                };
                if (v instanceof Data_List.Cons && (v.value0 instanceof TwoLeft && (v.value0.value2 instanceof Leaf && v1 instanceof Leaf))) {
                    return fromZipper(dictOrd)(v.value1)(new Two(Leaf.value, v.value0.value0, v.value0.value1, Leaf.value));
                };
                if (v instanceof Data_List.Cons && (v.value0 instanceof TwoRight && (v.value0.value0 instanceof Leaf && v1 instanceof Leaf))) {
                    return fromZipper(dictOrd)(v.value1)(new Two(Leaf.value, v.value0.value1, v.value0.value2, Leaf.value));
                };
                if (v instanceof Data_List.Cons && (v.value0 instanceof TwoLeft && v.value0.value2 instanceof Two)) {
                    var __tco_v = v.value1;
                    var __tco_v1 = new Three(v1, v.value0.value0, v.value0.value1, v.value0.value2.value0, v.value0.value2.value1, v.value0.value2.value2, v.value0.value2.value3);
                    v = __tco_v;
                    v1 = __tco_v1;
                    continue tco;
                };
                if (v instanceof Data_List.Cons && (v.value0 instanceof TwoRight && v.value0.value0 instanceof Two)) {
                    var __tco_v = v.value1;
                    var __tco_v1 = new Three(v.value0.value0.value0, v.value0.value0.value1, v.value0.value0.value2, v.value0.value0.value3, v.value0.value1, v.value0.value2, v1);
                    v = __tco_v;
                    v1 = __tco_v1;
                    continue tco;
                };
                if (v instanceof Data_List.Cons && (v.value0 instanceof TwoLeft && v.value0.value2 instanceof Three)) {
                    return fromZipper(dictOrd)(v.value1)(new Two(new Two(v1, v.value0.value0, v.value0.value1, v.value0.value2.value0), v.value0.value2.value1, v.value0.value2.value2, new Two(v.value0.value2.value3, v.value0.value2.value4, v.value0.value2.value5, v.value0.value2.value6)));
                };
                if (v instanceof Data_List.Cons && (v.value0 instanceof TwoRight && v.value0.value0 instanceof Three)) {
                    return fromZipper(dictOrd)(v.value1)(new Two(new Two(v.value0.value0.value0, v.value0.value0.value1, v.value0.value0.value2, v.value0.value0.value3), v.value0.value0.value4, v.value0.value0.value5, new Two(v.value0.value0.value6, v.value0.value1, v.value0.value2, v1)));
                };
                if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeLeft && (v.value0.value2 instanceof Leaf && (v.value0.value5 instanceof Leaf && v1 instanceof Leaf)))) {
                    return fromZipper(dictOrd)(v.value1)(new Three(Leaf.value, v.value0.value0, v.value0.value1, Leaf.value, v.value0.value3, v.value0.value4, Leaf.value));
                };
                if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeMiddle && (v.value0.value0 instanceof Leaf && (v.value0.value5 instanceof Leaf && v1 instanceof Leaf)))) {
                    return fromZipper(dictOrd)(v.value1)(new Three(Leaf.value, v.value0.value1, v.value0.value2, Leaf.value, v.value0.value3, v.value0.value4, Leaf.value));
                };
                if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeRight && (v.value0.value0 instanceof Leaf && (v.value0.value3 instanceof Leaf && v1 instanceof Leaf)))) {
                    return fromZipper(dictOrd)(v.value1)(new Three(Leaf.value, v.value0.value1, v.value0.value2, Leaf.value, v.value0.value4, v.value0.value5, Leaf.value));
                };
                if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeLeft && v.value0.value2 instanceof Two)) {
                    return fromZipper(dictOrd)(v.value1)(new Two(new Three(v1, v.value0.value0, v.value0.value1, v.value0.value2.value0, v.value0.value2.value1, v.value0.value2.value2, v.value0.value2.value3), v.value0.value3, v.value0.value4, v.value0.value5));
                };
                if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeMiddle && v.value0.value0 instanceof Two)) {
                    return fromZipper(dictOrd)(v.value1)(new Two(new Three(v.value0.value0.value0, v.value0.value0.value1, v.value0.value0.value2, v.value0.value0.value3, v.value0.value1, v.value0.value2, v1), v.value0.value3, v.value0.value4, v.value0.value5));
                };
                if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeMiddle && v.value0.value5 instanceof Two)) {
                    return fromZipper(dictOrd)(v.value1)(new Two(v.value0.value0, v.value0.value1, v.value0.value2, new Three(v1, v.value0.value3, v.value0.value4, v.value0.value5.value0, v.value0.value5.value1, v.value0.value5.value2, v.value0.value5.value3)));
                };
                if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeRight && v.value0.value3 instanceof Two)) {
                    return fromZipper(dictOrd)(v.value1)(new Two(v.value0.value0, v.value0.value1, v.value0.value2, new Three(v.value0.value3.value0, v.value0.value3.value1, v.value0.value3.value2, v.value0.value3.value3, v.value0.value4, v.value0.value5, v1)));
                };
                if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeLeft && v.value0.value2 instanceof Three)) {
                    return fromZipper(dictOrd)(v.value1)(new Three(new Two(v1, v.value0.value0, v.value0.value1, v.value0.value2.value0), v.value0.value2.value1, v.value0.value2.value2, new Two(v.value0.value2.value3, v.value0.value2.value4, v.value0.value2.value5, v.value0.value2.value6), v.value0.value3, v.value0.value4, v.value0.value5));
                };
                if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeMiddle && v.value0.value0 instanceof Three)) {
                    return fromZipper(dictOrd)(v.value1)(new Three(new Two(v.value0.value0.value0, v.value0.value0.value1, v.value0.value0.value2, v.value0.value0.value3), v.value0.value0.value4, v.value0.value0.value5, new Two(v.value0.value0.value6, v.value0.value1, v.value0.value2, v1), v.value0.value3, v.value0.value4, v.value0.value5));
                };
                if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeMiddle && v.value0.value5 instanceof Three)) {
                    return fromZipper(dictOrd)(v.value1)(new Three(v.value0.value0, v.value0.value1, v.value0.value2, new Two(v1, v.value0.value3, v.value0.value4, v.value0.value5.value0), v.value0.value5.value1, v.value0.value5.value2, new Two(v.value0.value5.value3, v.value0.value5.value4, v.value0.value5.value5, v.value0.value5.value6)));
                };
                if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeRight && v.value0.value3 instanceof Three)) {
                    return fromZipper(dictOrd)(v.value1)(new Three(v.value0.value0, v.value0.value1, v.value0.value2, new Two(v.value0.value3.value0, v.value0.value3.value1, v.value0.value3.value2, v.value0.value3.value3), v.value0.value3.value4, v.value0.value3.value5, new Two(v.value0.value3.value6, v.value0.value4, v.value0.value5, v1)));
                };
                return Data_Maybe_Unsafe.unsafeThrow("Impossible case in 'up'");
            };
        };
    };
    var removeMaxNode = function (__copy_ctx) {
        return function (__copy_v) {
            var ctx = __copy_ctx;
            var v = __copy_v;
            tco: while (true) {
                var ctx1 = ctx;
                if (v instanceof Two && (v.value0 instanceof Leaf && v.value3 instanceof Leaf)) {
                    return up(ctx1)(Leaf.value);
                };
                var ctx1 = ctx;
                if (v instanceof Two) {
                    var __tco_ctx = new Data_List.Cons(new TwoRight(v.value0, v.value1, v.value2), ctx1);
                    var __tco_v = v.value3;
                    ctx = __tco_ctx;
                    v = __tco_v;
                    continue tco;
                };
                var ctx1 = ctx;
                if (v instanceof Three && (v.value0 instanceof Leaf && (v.value3 instanceof Leaf && v.value6 instanceof Leaf))) {
                    return up(new Data_List.Cons(new TwoRight(Leaf.value, v.value1, v.value2), ctx1))(Leaf.value);
                };
                if (v instanceof Three) {
                    var __tco_ctx = new Data_List.Cons(new ThreeRight(v.value0, v.value1, v.value2, v.value3, v.value4, v.value5), ctx);
                    var __tco_v = v.value6;
                    ctx = __tco_ctx;
                    v = __tco_v;
                    continue tco;
                };
                if (v instanceof Leaf) {
                    return Data_Maybe_Unsafe.unsafeThrow("Impossible case in 'removeMaxNode'");
                };
                throw new Error("Failed pattern match at Data.Map line 173, column 1 - line 174, column 1: " + [ ctx.constructor.name, v.constructor.name ]);
            };
        };
    };
    var maxNode = function (__copy_v) {
        var v = __copy_v;
        tco: while (true) {
            if (v instanceof Two && v.value3 instanceof Leaf) {
                return {
                    key: v.value1, 
                    value: v.value2
                };
            };
            if (v instanceof Two) {
                var __tco_v = v.value3;
                v = __tco_v;
                continue tco;
            };
            if (v instanceof Three && v.value6 instanceof Leaf) {
                return {
                    key: v.value4, 
                    value: v.value5
                };
            };
            if (v instanceof Three) {
                var __tco_v = v.value6;
                v = __tco_v;
                continue tco;
            };
            if (v instanceof Leaf) {
                return Data_Maybe_Unsafe.unsafeThrow("Impossible case in 'maxNode'");
            };
            throw new Error("Failed pattern match at Data.Map line 173, column 1 - line 174, column 1: " + [ v.constructor.name ]);
        };
    };
    var down = function (__copy_ctx) {
        return function (__copy_k) {
            return function (__copy_v) {
                var ctx = __copy_ctx;
                var k = __copy_k;
                var v = __copy_v;
                tco: while (true) {
                    var ctx1 = ctx;
                    if (v instanceof Leaf) {
                        return fromZipper(dictOrd)(ctx1)(Leaf.value);
                    };
                    var ctx1 = ctx;
                    var k1 = k;
                    if (v instanceof Two && (v.value0 instanceof Leaf && (v.value3 instanceof Leaf && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v.value1)))) {
                        return up(ctx1)(Leaf.value);
                    };
                    var ctx1 = ctx;
                    var k1 = k;
                    if (v instanceof Two) {
                        if (Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v.value1)) {
                            var max = maxNode(v.value0);
                            return removeMaxNode(new Data_List.Cons(new TwoLeft(max.key, max.value, v.value3), ctx1))(v.value0);
                        };
                        if (Prelude["<"](dictOrd)(k1)(v.value1)) {
                            var __tco_ctx = new Data_List.Cons(new TwoLeft(v.value1, v.value2, v.value3), ctx1);
                            var __tco_v = v.value0;
                            ctx = __tco_ctx;
                            k = k1;
                            v = __tco_v;
                            continue tco;
                        };
                        if (Prelude.otherwise) {
                            var __tco_ctx = new Data_List.Cons(new TwoRight(v.value0, v.value1, v.value2), ctx1);
                            var __tco_v = v.value3;
                            ctx = __tco_ctx;
                            k = k1;
                            v = __tco_v;
                            continue tco;
                        };
                    };
                    var ctx1 = ctx;
                    var k1 = k;
                    if (v instanceof Three && (v.value0 instanceof Leaf && (v.value3 instanceof Leaf && v.value6 instanceof Leaf))) {
                        if (Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v.value1)) {
                            return fromZipper(dictOrd)(ctx1)(new Two(Leaf.value, v.value4, v.value5, Leaf.value));
                        };
                        if (Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v.value4)) {
                            return fromZipper(dictOrd)(ctx1)(new Two(Leaf.value, v.value1, v.value2, Leaf.value));
                        };
                    };
                    if (v instanceof Three) {
                        if (Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k)(v.value1)) {
                            var max = maxNode(v.value0);
                            return removeMaxNode(new Data_List.Cons(new ThreeLeft(max.key, max.value, v.value3, v.value4, v.value5, v.value6), ctx))(v.value0);
                        };
                        if (Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k)(v.value4)) {
                            var max = maxNode(v.value3);
                            return removeMaxNode(new Data_List.Cons(new ThreeMiddle(v.value0, v.value1, v.value2, max.key, max.value, v.value6), ctx))(v.value3);
                        };
                        if (Prelude["<"](dictOrd)(k)(v.value1)) {
                            var __tco_ctx = new Data_List.Cons(new ThreeLeft(v.value1, v.value2, v.value3, v.value4, v.value5, v.value6), ctx);
                            var __tco_k = k;
                            var __tco_v = v.value0;
                            ctx = __tco_ctx;
                            k = __tco_k;
                            v = __tco_v;
                            continue tco;
                        };
                        if (Prelude["<"](dictOrd)(v.value1)(k) && Prelude["<"](dictOrd)(k)(v.value4)) {
                            var __tco_ctx = new Data_List.Cons(new ThreeMiddle(v.value0, v.value1, v.value2, v.value4, v.value5, v.value6), ctx);
                            var __tco_k = k;
                            var __tco_v = v.value3;
                            ctx = __tco_ctx;
                            k = __tco_k;
                            v = __tco_v;
                            continue tco;
                        };
                        if (Prelude.otherwise) {
                            var __tco_ctx = new Data_List.Cons(new ThreeRight(v.value0, v.value1, v.value2, v.value3, v.value4, v.value5), ctx);
                            var __tco_k = k;
                            var __tco_v = v.value6;
                            ctx = __tco_ctx;
                            k = __tco_k;
                            v = __tco_v;
                            continue tco;
                        };
                    };
                    throw new Error("Failed pattern match at Data.Map line 173, column 1 - line 174, column 1: " + [ ctx.constructor.name, k.constructor.name, v.constructor.name ]);
                };
            };
        };
    };
    return down(Data_List.Nil.value);
};
var checkValid = function (tree) {
    var allHeights = function (v) {
        if (v instanceof Leaf) {
            return Prelude.pure(Data_List.applicativeList)(0);
        };
        if (v instanceof Two) {
            return Prelude.map(Data_List.functorList)(function (n) {
                return n + 1 | 0;
            })(Prelude["++"](Data_List.semigroupList)(allHeights(v.value0))(allHeights(v.value3)));
        };
        if (v instanceof Three) {
            return Prelude.map(Data_List.functorList)(function (n) {
                return n + 1 | 0;
            })(Prelude["++"](Data_List.semigroupList)(allHeights(v.value0))(Prelude["++"](Data_List.semigroupList)(allHeights(v.value3))(allHeights(v.value6))));
        };
        throw new Error("Failed pattern match at Data.Map line 108, column 1 - line 109, column 1: " + [ v.constructor.name ]);
    };
    return Data_List.length(Data_List.nub(Prelude.eqInt)(allHeights(tree))) === 1;
};
var alter = function (dictOrd) {
    return function (f) {
        return function (k) {
            return function (m) {
                var $584 = f(lookup(dictOrd)(k)(m));
                if ($584 instanceof Data_Maybe.Nothing) {
                    return $$delete(dictOrd)(k)(m);
                };
                if ($584 instanceof Data_Maybe.Just) {
                    return insert(dictOrd)(k)($584.value0)(m);
                };
                throw new Error("Failed pattern match at Data.Map line 235, column 1 - line 236, column 1: " + [ $584.constructor.name ]);
            };
        };
    };
};
var fromFoldableWith = function (dictOrd) {
    return function (dictFoldable) {
        return function (f) {
            var combine = function (v) {
                return function (v1) {
                    if (v1 instanceof Data_Maybe.Just) {
                        return Data_Maybe.Just.create(f(v)(v1.value0));
                    };
                    if (v1 instanceof Data_Maybe.Nothing) {
                        return new Data_Maybe.Just(v);
                    };
                    throw new Error("Failed pattern match at Data.Map line 253, column 3 - line 254, column 3: " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
            return Data_Foldable.foldl(dictFoldable)(function (m) {
                return function (v) {
                    return alter(dictOrd)(combine(v.value1))(v.value0)(m);
                };
            })(empty);
        };
    };
};
var fromListWith = function (dictOrd) {
    return fromFoldableWith(dictOrd)(Data_List.foldableList);
};
var unionWith = function (dictOrd) {
    return function (f) {
        return function (m1) {
            return function (m2) {
                var go = function (m) {
                    return function (v) {
                        return alter(dictOrd)(function ($597) {
                            return Data_Maybe.Just.create(Data_Maybe.maybe(v.value1)(f(v.value1))($597));
                        })(v.value0)(m);
                    };
                };
                return Data_Foldable.foldl(Data_List.foldableList)(go)(m2)(toList(m1));
            };
        };
    };
};
var union = function (dictOrd) {
    return unionWith(dictOrd)(Prelude["const"]);
};
var semigroupMap = function (dictOrd) {
    return new Prelude.Semigroup(union(dictOrd));
};
var monoidMap = function (dictOrd) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMap(dictOrd);
    }, empty);
};
var traversableMap = function (dictOrd) {
    return new Data_Traversable.Traversable(function () {
        return foldableMap;
    }, function () {
        return functorMap;
    }, function (dictApplicative) {
        return Data_Traversable.traverse(traversableMap(dictOrd))(dictApplicative)(Prelude.id(Prelude.categoryFn));
    }, function (dictApplicative) {
        return function (f) {
            return function (ms) {
                return Data_Foldable.foldr(Data_List.foldableList)(function (x) {
                    return function (acc) {
                        return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(union(dictOrd))(x))(acc);
                    };
                })(Prelude.pure(dictApplicative)(empty))(Prelude["<$>"](Data_List.functorList)(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.uncurry(singleton)))(Prelude["<$>"](Data_List.functorList)(Data_Traversable.traverse(Data_Tuple.traversableTuple)(dictApplicative)(f))(toList(ms))));
            };
        };
    });
};
var unions = function (dictOrd) {
    return function (dictFoldable) {
        return Data_Foldable.foldl(dictFoldable)(union(dictOrd))(empty);
    };
};
var update = function (dictOrd) {
    return function (f) {
        return function (k) {
            return function (m) {
                return alter(dictOrd)(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
            };
        };
    };
};
module.exports = {
    size: size, 
    unions: unions, 
    unionWith: unionWith, 
    union: union, 
    values: values, 
    keys: keys, 
    update: update, 
    alter: alter, 
    member: member, 
    "delete": $$delete, 
    fromListWith: fromListWith, 
    fromList: fromList, 
    toList: toList, 
    fromFoldableWith: fromFoldableWith, 
    fromFoldable: fromFoldable, 
    lookup: lookup, 
    insert: insert, 
    checkValid: checkValid, 
    singleton: singleton, 
    isEmpty: isEmpty, 
    empty: empty, 
    showTree: showTree, 
    eqMap: eqMap, 
    showMap: showMap, 
    ordMap: ordMap, 
    semigroupMap: semigroupMap, 
    monoidMap: monoidMap, 
    functorMap: functorMap, 
    foldableMap: foldableMap, 
    traversableMap: traversableMap
};
