// Generated by psc version 0.8.0.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
var Control_Alternative = require("Control.Alternative");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Control_Monad_Eff_Console = require("Control.Monad.Eff.Console");
var Control_Monad_Trampoline = require("Control.Monad.Trampoline");
var Control_MonadPlus = require("Control.MonadPlus");
var Control_Plus = require("Control.Plus");
var Control_Lazy = require("Control.Lazy");
var Data_Char = require("Data.Char");
var Data_Foldable = require("Data.Foldable");
var Data_Int = require("Data.Int");
var Data_Int_Bits = require("Data.Int.Bits");
var Data_Lazy = require("Data.Lazy");
var Data_Maybe = require("Data.Maybe");
var Data_Maybe_Unsafe = require("Data.Maybe.Unsafe");
var Data_Monoid = require("Data.Monoid");
var Data_Monoid_Additive = require("Data.Monoid.Additive");
var Data_Profunctor = require("Data.Profunctor");
var Data_Profunctor_Strong = require("Data.Profunctor.Strong");
var Data_Tuple = require("Data.Tuple");
var Control_Monad_List_Trans = require("Control.Monad.List.Trans");
var Data_Array = require("Data.Array");
var Data_Array_Unsafe = require("Data.Array.Unsafe");
var Data_List = require("Data.List");
var Data_Machine_Mealy = require("Data.Machine.Mealy");
var $$Math = require("Math");
var Control_Monad_Free = require("Control.Monad.Free");
var GenState = (function () {
    function GenState(value0) {
        this.value0 = value0;
    };
    GenState.create = function (value0) {
        return new GenState(value0);
    };
    return GenState;
})();
var GenOut = (function () {
    function GenOut(value0) {
        this.value0 = value0;
    };
    GenOut.create = function (value0) {
        return new GenOut(value0);
    };
    return GenOut;
})();
var GenT = (function () {
    function GenT(value0) {
        this.value0 = value0;
    };
    GenT.create = function (value0) {
        return new GenT(value0);
    };
    return GenT;
})();
var wrapEffect = function (dictMonad) {
    return function (fa) {
        var g = function (v) {
            return new GenOut({
                state: v.value0,
                value: v.value1
            });
        };
        return GenT.create(Prelude["<$>"](Data_Machine_Mealy.functorMealy(dictMonad))(g)(Data_Profunctor_Strong["&&&"](Data_Machine_Mealy.categoryMealy(dictMonad))(Data_Machine_Mealy.strongMealy(dictMonad))(Prelude.id(Data_Machine_Mealy.categoryMealy(dictMonad)))(Data_Machine_Mealy.wrapEffect(dictMonad)(fa))));
    };
};
var unGenState = function (v) {
    return v.value0;
};
var unGenOut = function (v) {
    return v.value0;
};
var unGen = function (v) {
    return v.value0;
};
var transGen = function (dictMonad) {
    return function (f) {
        return function (b) {
            return function (v) {
                var loop = function (m1) {
                    return function (b2) {
                        var g = function (v1) {
                            if (v1 instanceof Data_Machine_Mealy.Halt) {
                                return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(Data_Machine_Mealy.Halt.value);
                            };
                            if (v1 instanceof Data_Machine_Mealy.Emit) {
                                var $133 = f(b2)(v1.value0.value0.value);
                                if ($133.value1 instanceof Data_Maybe.Nothing) {
                                    return Data_Machine_Mealy.stepMealy(dictMonad)(v1.value0.value0.state)(loop(v1.value1)($133.value0));
                                };
                                if ($133.value1 instanceof Data_Maybe.Just) {
                                    var c__ALT = new GenOut({
                                        value: $133.value1.value0,
                                        state: v1.value0.value0.state
                                    });
                                    return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Machine_Mealy.Emit(c__ALT, loop(v1.value1)($133.value0)));
                                };
                                throw new Error("Failed pattern match at Test.StrongCheck.Gen line 310, column 11 - line 311, column 11: " + [ $133.constructor.name ]);
                            };
                            throw new Error("Failed pattern match at Test.StrongCheck.Gen line 310, column 11 - line 311, column 11: " + [ v1.constructor.name ]);
                        };
                        return Data_Machine_Mealy.mealy(dictMonad["__superclass_Prelude.Applicative_0"]())(function (st) {
                            return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(Data_Machine_Mealy.stepMealy(dictMonad)(st)(m1))(g);
                        });
                    };
                };
                return GenT.create(loop(v.value0)(b));
            };
        };
    };
};
var toLazyList = function (v) {
    return function (s) {
        var loop = function (m1) {
            return function (s2) {
                var $147 = Control_Monad_Trampoline.runTrampoline(Data_Machine_Mealy.stepMealy(Control_Monad_Free.freeMonad)(s2)(m1));
                if ($147 instanceof Data_Machine_Mealy.Halt) {
                    return Control_Monad_List_Trans.nil(Data_Lazy.applicativeLazy);
                };
                if ($147 instanceof Data_Machine_Mealy.Emit) {
                    return Control_Monad_List_Trans["prepend'"](Data_Lazy.applicativeLazy)($147.value0.value0.value)(Data_Lazy.defer(function (v1) {
                        return loop($147.value1)($147.value0.value0.state);
                    }));
                };
                throw new Error("Failed pattern match at Test.StrongCheck.Gen line 460, column 1 - line 461, column 1: " + [ $147.constructor.name ]);
            };
        };
        return Control_Monad_List_Trans.wrapLazy(Data_Lazy.applicativeLazy)(Data_Lazy.defer(function (v1) {
            return loop(v.value0)(s);
        }));
    };
};
var stateful = function (dictMonad) {
    return function (f) {
        return GenT.create(Prelude.bind(Data_Machine_Mealy.bindMealy(dictMonad))(Data_Machine_Mealy.take(dictMonad)(1)(Prelude.id(Data_Machine_Mealy.categoryMealy(dictMonad))))(function (v) {
            return unGen(f(v));
        }));
    };
};
var stateM = function (f) {
    return function ($283) {
        return GenState.create(f(unGenState($283)));
    };
};
var variant = function (dictMonad) {
    return function (n) {
        return function (g) {
            return GenT.create(Data_Profunctor.lmap(Data_Machine_Mealy.profunctorMealy(dictMonad))(stateM(function (s) {
                var $157 = {};
                for (var $158 in s) {
                    if (s.hasOwnProperty($158)) {
                        $157[$158] = s[$158];
                    };
                };
                $157.seed = n;
                return $157;
            }))(unGen(g)));
        };
    };
};
var sized = function (dictMonad) {
    return function (f) {
        return stateful(dictMonad)(function (s) {
            return f((unGenState(s)).size);
        });
    };
};
var semigroupGenT = function (dictMonad) {
    return new Prelude.Semigroup(function (v) {
        return function (v1) {
            return new GenT(Prelude["<>"](Data_Machine_Mealy.semigroupMealy(dictMonad))(v.value0)(v1.value0));
        };
    });
};
var resize = function (dictMonad) {
    return function (sz) {
        return function (g) {
            return GenT.create(Data_Profunctor.lmap(Data_Machine_Mealy.profunctorMealy(dictMonad))(stateM(function (s) {
                var $163 = {};
                for (var $164 in s) {
                    if (s.hasOwnProperty($164)) {
                        $163[$164] = s[$164];
                    };
                };
                $163.size = sz;
                return $163;
            }))(unGen(g)));
        };
    };
};
var pureGen = function (dictMonad) {
    return function (f) {
        return GenT.create(Data_Profunctor.arr(Data_Machine_Mealy.categoryMealy(dictMonad))(Data_Machine_Mealy.profunctorMealy(dictMonad))(f));
    };
};
var monoidGenT = function (dictMonad) {
    return new Data_Monoid.Monoid(function () {
        return semigroupGenT(dictMonad);
    }, new GenT(Data_Monoid.mempty(Data_Machine_Mealy.monoidMealy(dictMonad))));
};
var liftMealy = function (dictMonad) {
    return function (f) {
        return function (g) {
            return GenT.create(f(unGen(g)));
        };
    };
};
var takeGen = function (dictMonad) {
    return function (n) {
        return liftMealy(dictMonad)(Data_Machine_Mealy.take(dictMonad)(n));
    };
};
var lcgN = Data_Int.toNumber(1 << 30);
var lcgM = 1.103515245e9;
var lcgC = 12345.0;
var lcgNext = function (n) {
    return $$Math["%"](lcgM * n + lcgC)(lcgN);
};
var perturbNum = function (n) {
    return Prelude["+"](Prelude.semiringNumber)(lcgNext(Data_Int.toNumber($foreign.float32ToInt32(n))));
};
var perturbGen = function (dictMonad) {
    return function (n) {
        return function (v) {
            return GenT.create(Data_Profunctor.lmap(Data_Machine_Mealy.profunctorMealy(dictMonad))(stateM(function (s) {
                var $167 = {};
                for (var $168 in s) {
                    if (s.hasOwnProperty($168)) {
                        $167[$168] = s[$168];
                    };
                };
                $167.seed = perturbNum(n)(s.seed);
                return $167;
            }))(v.value0));
        };
    };
};
var semigroupGenState = new Prelude.Semigroup(function (v) {
    return function (v1) {
        return new GenState({
            seed: perturbNum(v.value0.seed)(v1.value0.seed),
            size: v1.value0.size
        });
    };
});
var monoidGenState = new Data_Monoid.Monoid(function () {
    return semigroupGenState;
}, new GenState({
    seed: 0.0,
    size: 10
}));
var semigroupGenOut = function (dictSemigroup) {
    return new Prelude.Semigroup(function (v) {
        return function (v1) {
            return new GenOut({
                state: Prelude["<>"](semigroupGenState)(v.value0.state)(v1.value0.state),
                value: Prelude["<>"](dictSemigroup)(v.value0.value)(v1.value0.value)
            });
        };
    });
};
var monoidGenOut = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupGenOut(dictMonoid["__superclass_Prelude.Semigroup_0"]());
    }, new GenOut({
        state: Data_Monoid.mempty(monoidGenState),
        value: Data_Monoid.mempty(dictMonoid)
    }));
};
var updateSeedState = function (v) {
    return new GenState({
        seed: lcgNext(v.value0.seed),
        size: v.value0.size
    });
};
var lcgStep = function (dictMonad) {
    return GenT.create(Data_Profunctor.arr(Data_Machine_Mealy.categoryMealy(dictMonad))(Data_Machine_Mealy.profunctorMealy(dictMonad))(function (s) {
        return new GenOut({
            state: updateSeedState(s),
            value: (unGenState(s)).seed
        });
    }));
};
var updateSeedGen = function (dictMonad) {
    return function (v) {
        return GenT.create(Data_Profunctor.lmap(Data_Machine_Mealy.profunctorMealy(dictMonad))(updateSeedState)(v.value0));
    };
};
var lazyGenT = function (dictMonad) {
    return new Control_Lazy.Lazy(function (f) {
        return GenT.create(Control_Lazy.defer(Data_Machine_Mealy.lazyMealy(dictMonad))(function ($284) {
            return unGen(f($284));
        }));
    });
};
var interleave = function (dictMonad) {
    return function (v) {
        return function (v1) {
            return GenT.create(Data_Machine_Mealy.interleave(dictMonad)(v.value0)(v1.value0));
        };
    };
};
var infinite = function (dictMonad) {
    return liftMealy(dictMonad)(Data_Machine_Mealy.loop(dictMonad));
};
var functorGenOut = new Prelude.Functor(function (f) {
    return function (v) {
        return new GenOut({
            state: v.value0.state,
            value: f(v.value0.value)
        });
    };
});
var functorGenT = function (dictMonad) {
    return new Prelude.Functor(function (f) {
        return function (v) {
            return GenT.create(Prelude["<$>"](Data_Machine_Mealy.functorMealy(dictMonad))(Prelude["<$>"](functorGenOut)(f))(v.value0));
        };
    });
};
var uniform = function (dictMonad) {
    return Prelude["<$>"](functorGenT(dictMonad))(function (n) {
        return n / Data_Int.toNumber(1 << 30);
    })(lcgStep(dictMonad));
};
var stepGen = function (dictMonad) {
    return function (st) {
        return function (v) {
            var h = function (v1) {
                if (v1 instanceof Data_Machine_Mealy.Halt) {
                    return Data_Maybe.Nothing.value;
                };
                if (v1 instanceof Data_Machine_Mealy.Emit) {
                    return Data_Maybe.Just.create(Prelude["<$>"](functorGenOut)(Prelude.flip(Data_Tuple.Tuple.create)(new GenT(v1.value1)))(v1.value0));
                };
                throw new Error("Failed pattern match at Test.StrongCheck.Gen line 131, column 31 - line 132, column 31: " + [ v1.constructor.name ]);
            };
            return Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(h)(Data_Machine_Mealy.stepMealy(dictMonad)(st)(v.value0));
        };
    };
};
var foldGen$prime = function (dictMonad) {
    return function (f) {
        return function (b) {
            return function (s) {
                return function (v) {
                    var loop = function (st) {
                        return function (m1) {
                            return function (b2) {
                                var g = function (v1) {
                                    if (v1 instanceof Data_Machine_Mealy.Halt) {
                                        return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(b2, new GenT(Data_Machine_Mealy.halt(dictMonad["__superclass_Prelude.Applicative_0"]()))));
                                    };
                                    if (v1 instanceof Data_Machine_Mealy.Emit) {
                                        var b__ALT = f(b2)(v1.value0.value0.value);
                                        return Data_Maybe.maybe(Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(b2, new GenT(v1.value1))))(loop(v1.value0.value0.state)(v1.value1))(b__ALT);
                                    };
                                    throw new Error("Failed pattern match at Test.StrongCheck.Gen line 296, column 11 - line 297, column 11: " + [ v1.constructor.name ]);
                                };
                                return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(Data_Machine_Mealy.stepMealy(dictMonad)(st)(m1))(g);
                            };
                        };
                    };
                    return loop(s)(v.value0)(b);
                };
            };
        };
    };
};
var foldGen = function (dictMonad) {
    return function (f) {
        return function (b) {
            return function (s) {
                return function (g) {
                    return Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.fst)(foldGen$prime(dictMonad)(f)(b)(s)(g));
                };
            };
        };
    };
};
var extend = function (dictMonad) {
    return function (n) {
        return function (v) {
            var loop = function (i) {
                return function (m1) {
                    return Data_Machine_Mealy.mealy(dictMonad["__superclass_Prelude.Applicative_0"]())(function (st) {
                        var f = function (v1) {
                            if (v1 instanceof Data_Machine_Mealy.Halt) {
                                var $212 = i >= n;
                                if ($212) {
                                    return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(Data_Machine_Mealy.Halt.value);
                                };
                                if (!$212) {
                                    return Data_Machine_Mealy.stepMealy(dictMonad)(st)(loop(i)(v.value0));
                                };
                                throw new Error("Failed pattern match at Test.StrongCheck.Gen line 276, column 15 - line 277, column 15: " + [ $212.constructor.name ]);
                            };
                            if (v1 instanceof Data_Machine_Mealy.Emit) {
                                return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Machine_Mealy.Emit(v1.value0, loop(i + 1 | 0)(v1.value1)));
                            };
                            throw new Error("Failed pattern match at Test.StrongCheck.Gen line 276, column 15 - line 277, column 15: " + [ v1.constructor.name ]);
                        };
                        return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(Data_Machine_Mealy.stepMealy(dictMonad)(st)(m1))(f);
                    });
                };
            };
            return Prelude["<>"](semigroupGenT(dictMonad))(GenT.create(loop(0)(v.value0)))(new GenT(v.value0));
        };
    };
};
var runGen = function (dictMonad) {
    return function (n) {
        return function (st) {
            return function (g) {
                var f = function (v) {
                    return function (a) {
                        var $216 = Data_Array.length(v) < n;
                        if ($216) {
                            return Data_Maybe.Just.create(Prelude["<>"](Prelude.semigroupArray)(v)([ a ]));
                        };
                        if (!$216) {
                            return Data_Maybe.Nothing.value;
                        };
                        throw new Error("Failed pattern match at Test.StrongCheck.Gen line 418, column 9 - line 426, column 1: " + [ $216.constructor.name ]);
                    };
                };
                return foldGen$prime(dictMonad)(f)([  ])(st)(extend(dictMonad)(n)(g));
            };
        };
    };
};
var sample$prime = function (dictMonad) {
    return function (n) {
        return function (st) {
            return function (g) {
                return Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.fst)(runGen(dictMonad)(n)(st)(g));
            };
        };
    };
};
var sample = function (dictMonad) {
    return function (n) {
        return sample$prime(dictMonad)(n)(new GenState({
            size: 10,
            seed: 4.545645874e9
        }));
    };
};
var showSample$prime = function (dictShow) {
    return function (n) {
        return function (g) {
            return Control_Monad_Eff_Console.print(Prelude.showArray(dictShow))(Control_Monad_Trampoline.runTrampoline(sample(Control_Monad_Free.freeMonad)(n)(g)));
        };
    };
};
var showSample = function (dictShow) {
    return showSample$prime(dictShow)(10);
};
var vectorOf = function (dictMonad) {
    return function (n) {
        return function (g) {
            var f = function (b) {
                return function (a) {
                    var b__ALT = Prelude["<>"](Prelude.semigroupArray)(b)([ a ]);
                    var $217 = Data_Array.length(b__ALT) >= n;
                    if ($217) {
                        return new Data_Tuple.Tuple([  ], new Data_Maybe.Just(b__ALT));
                    };
                    if (!$217) {
                        return new Data_Tuple.Tuple(b__ALT, Data_Maybe.Nothing.value);
                    };
                    throw new Error("Failed pattern match at Test.StrongCheck.Gen line 234, column 9 - line 238, column 1: " + [ $217.constructor.name ]);
                };
            };
            return transGen(dictMonad)(f)([  ])(extend(dictMonad)(n)(g));
        };
    };
};
var evalGen = function (dictMonad) {
    return function (g) {
        return function (st) {
            var h = function (v) {
                if (v instanceof Data_Maybe.Nothing) {
                    return Data_Maybe.Nothing.value;
                };
                if (v instanceof Data_Maybe.Just) {
                    return new Data_Maybe.Just(v.value0.value0.value.value0);
                };
                throw new Error("Failed pattern match at Test.StrongCheck.Gen line 136, column 23 - line 137, column 23: " + [ v.constructor.name ]);
            };
            return Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(h)(stepGen(dictMonad)(st)(g));
        };
    };
};
var repeatable$prime = function (dictMonad) {
    return function (f) {
        return GenT.create(Data_Machine_Mealy.pureMealy(dictMonad["__superclass_Prelude.Applicative_0"]())(function (s) {
            return new Data_Machine_Mealy.Emit(new GenOut({
                state: s,
                value: function (a) {
                    return Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe_Unsafe.fromJust)(evalGen(dictMonad)(f(a))(s));
                }
            }), Data_Machine_Mealy.halt(dictMonad["__superclass_Prelude.Applicative_0"]()));
        }));
    };
};
var repeatable = function (f) {
    var g = function (f__ALT) {
        return function (a) {
            return Control_Monad_Trampoline.runTrampoline(f__ALT(a));
        };
    };
    return Prelude["<$>"](functorGenT(Control_Monad_Free.freeMonad))(g)(repeatable$prime(Control_Monad_Free.freeMonad)(f));
};
var dropGen = function (dictMonad) {
    return function (n) {
        return liftMealy(dictMonad)(Data_Machine_Mealy.drop(dictMonad)(n));
    };
};
var collectAll = function (dictMonad) {
    var f = function (v) {
        return function (a) {
            return Data_Maybe.Just.create(Prelude["<>"](Prelude.semigroupArray)(v)([ a ]));
        };
    };
    return foldGen(dictMonad)(f)([  ]);
};
var chunked = function (dictMonad) {
    return function (n) {
        return function (g) {
            var f = function (xs) {
                return function (a) {
                    var xs__ALT = Data_Array[":"](a)(xs);
                    var $224 = Data_Array.length(xs__ALT) >= n;
                    if ($224) {
                        return new Data_Tuple.Tuple([  ], new Data_Maybe.Just(xs__ALT));
                    };
                    if (!$224) {
                        return new Data_Tuple.Tuple(xs__ALT, Data_Maybe.Nothing.value);
                    };
                    throw new Error("Failed pattern match at Test.StrongCheck.Gen line 428, column 3 - line 432, column 1: " + [ $224.constructor.name ]);
                };
            };
            return transGen(dictMonad)(f)([  ])(extend(dictMonad)(n)(g));
        };
    };
};
var chooseInt = function (dictMonad) {
    return function (a) {
        return function (b) {
            var min = $$Math.ceil($$Math.min(a)(b));
            var max = $$Math.floor($$Math.max(a)(b));
            var numRes = Prelude["<$>"](functorGenT(dictMonad))(function ($285) {
                return (min - 0.5) + ((max - min) + 1.0) * $285;
            })(uniform(dictMonad));
            var rounded = Prelude["<$>"](functorGenT(dictMonad))($$Math.round)(numRes);
            var intRes = Prelude["<$>"](functorGenT(dictMonad))(Data_Int.fromNumber)(rounded);
            return Prelude["<$>"](functorGenT(dictMonad))(Data_Maybe.fromMaybe(0))(intRes);
        };
    };
};
var choose = function (dictMonad) {
    return function (a) {
        return function (b) {
            var min = $$Math.min(a)(b);
            var max = $$Math.max(a)(b);
            return Prelude["<$>"](functorGenT(dictMonad))(Prelude[">>>"](Prelude.semigroupoidFn)(Prelude["*"](Prelude.semiringNumber)(max - min))(Prelude["+"](Prelude.semiringNumber)(min)))(uniform(dictMonad));
        };
    };
};
var charGen = function (dictMonad) {
    return Prelude["<$>"](functorGenT(dictMonad))(Data_Char.fromCharCode)(chooseInt(dictMonad)(0.0)(65535.0));
};
var applyGenOut = new Prelude.Apply(function () {
    return functorGenOut;
}, function (v) {
    return function (v1) {
        return new GenOut({
            state: v1.value0.state,
            value: v.value0.value(v1.value0.value)
        });
    };
});
var applyGenT = function (dictMonad) {
    return new Prelude.Apply(function () {
        return functorGenT(dictMonad);
    }, function (f) {
        return function (x) {
            return GenT.create(Prelude.bind(Data_Machine_Mealy.bindMealy(dictMonad))(unGen(f))(function (v) {
                return Prelude.bind(Data_Machine_Mealy.bindMealy(dictMonad))(unGen(updateSeedGen(dictMonad)(x)))(function (v1) {
                    return Prelude["return"](Data_Machine_Mealy.applicativeMealy(dictMonad))(Prelude["<*>"](applyGenOut)(v)(v1));
                });
            }));
        };
    });
};
var bindGenT = function (dictMonad) {
    return new Prelude.Bind(function () {
        return applyGenT(dictMonad);
    }, function (v) {
        return function (f) {
            return GenT.create(Prelude.bind(Data_Machine_Mealy.bindMealy(dictMonad))(v.value0)(function (v1) {
                return unGen(updateSeedGen(dictMonad)(f((unGenOut(v1)).value)));
            }));
        };
    });
};
var arrayOf = function (dictMonad) {
    return function (g) {
        return sized(dictMonad)(function (n) {
            return Prelude.bind(bindGenT(dictMonad))(chooseInt(dictMonad)(0.0)(Data_Int.toNumber(n)))(function (v) {
                return vectorOf(dictMonad)(v)(g);
            });
        });
    };
};
var frequency = function (dictMonad) {
    return function (x) {
        return function (xs) {
            var xxs = new Data_List.Cons(x, xs);
            var total = Data_Monoid_Additive.runAdditive(Data_Foldable.fold(Data_List.foldableList)(Data_Monoid_Additive.monoidAdditive(Prelude.semiringNumber))(Prelude["<$>"](Data_List.functorList)(function ($286) {
                return Data_Monoid_Additive.Additive(Data_Tuple.fst($286));
            })(xxs)));
            var pick = function (__copy_n) {
                return function (__copy_d) {
                    return function (__copy_v) {
                        var n = __copy_n;
                        var d = __copy_d;
                        var v = __copy_v;
                        tco: while (true) {
                            var d1 = d;
                            if (v instanceof Data_List.Nil) {
                                return d1;
                            };
                            if (v instanceof Data_List.Cons) {
                                var $239 = n <= v.value0.value0;
                                if ($239) {
                                    return v.value0.value1;
                                };
                                if (!$239) {
                                    var __tco_n = n - v.value0.value0;
                                    var __tco_d = d;
                                    var __tco_v = v.value1;
                                    n = __tco_n;
                                    d = __tco_d;
                                    v = __tco_v;
                                    continue tco;
                                };
                                throw new Error("Failed pattern match at Test.StrongCheck.Gen line 199, column 1 - line 200, column 1: " + [ $239.constructor.name ]);
                            };
                            throw new Error("Failed pattern match at Test.StrongCheck.Gen line 199, column 1 - line 200, column 1: " + [ n.constructor.name, d.constructor.name, v.constructor.name ]);
                        };
                    };
                };
            };
            return Prelude.bind(bindGenT(dictMonad))(chooseInt(dictMonad)(1.0)(total))(function (v) {
                return pick(Data_Int.toNumber(v))(Data_Tuple.snd(x))(xxs);
            });
        };
    };
};
var oneOf = function (dictMonad) {
    return function (x) {
        return function (xs) {
            return Prelude.bind(bindGenT(dictMonad))(chooseInt(dictMonad)(0.0)(Data_Int.toNumber(Data_Array.length(xs))))(function (v) {
                var $246 = v === 0;
                if ($246) {
                    return x;
                };
                if (!$246) {
                    return Data_Maybe.fromMaybe(x)(Data_Array["!!"](xs)(v - 1));
                };
                throw new Error("Failed pattern match at Test.StrongCheck.Gen line 194, column 1 - line 195, column 1: " + [ $246.constructor.name ]);
            });
        };
    };
};
var applyGen = function (dictMonad) {
    return function (s) {
        return function (v) {
            var f = function (v1) {
                if (v1 instanceof Data_Machine_Mealy.Halt) {
                    return Data_Maybe.Nothing.value;
                };
                if (v1 instanceof Data_Machine_Mealy.Emit) {
                    return Data_Maybe.Just.create(new GenOut({
                        state: v1.value0.value0.state,
                        value: new Data_Tuple.Tuple(v1.value0.value0.value, new GenT(v1.value1))
                    }));
                };
                throw new Error("Failed pattern match at Test.StrongCheck.Gen line 393, column 3 - line 394, column 3: " + [ v1.constructor.name ]);
            };
            return Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(f)(Data_Machine_Mealy.stepMealy(dictMonad)(s)(v.value0));
        };
    };
};
var applicativeGenT = function (dictMonad) {
    return new Prelude.Applicative(function () {
        return applyGenT(dictMonad);
    }, function (t) {
        return GenT.create(Data_Profunctor.arr(Data_Machine_Mealy.categoryMealy(dictMonad))(Data_Machine_Mealy.profunctorMealy(dictMonad))(function (s) {
            return new GenOut({
                state: updateSeedState(s),
                value: t
            });
        }));
    });
};
var arrayOf1 = function (dictMonad) {
    return function (g) {
        return sized(dictMonad)(function (n) {
            return Prelude.bind(bindGenT(dictMonad))(chooseInt(dictMonad)(0.0)(Data_Int.toNumber(n)))(function (v) {
                return Prelude.bind(bindGenT(dictMonad))(g)(function (v1) {
                    return Prelude.bind(bindGenT(dictMonad))(vectorOf(dictMonad)(v - 1)(g))(function (v2) {
                        return Prelude["return"](applicativeGenT(dictMonad))(new Data_Tuple.Tuple(v1, v2));
                    });
                });
            });
        });
    };
};
var elements = function (dictMonad) {
    return function (x) {
        return function (xs) {
            return Prelude.bind(bindGenT(dictMonad))(chooseInt(dictMonad)(0.0)(Data_Int.toNumber(Data_List.length(xs))))(function (v) {
                return Prelude.pure(applicativeGenT(dictMonad))((function () {
                    var $260 = v === 0;
                    if ($260) {
                        return x;
                    };
                    if (!$260) {
                        return Data_Maybe.fromMaybe(x)(Data_List["!!"](xs)(v - 1));
                    };
                    throw new Error("Failed pattern match at Test.StrongCheck.Gen line 238, column 1 - line 239, column 1: " + [ $260.constructor.name ]);
                })());
            });
        };
    };
};
var monadGenT = function (dictMonad) {
    return new Prelude.Monad(function () {
        return applicativeGenT(dictMonad);
    }, function () {
        return bindGenT(dictMonad);
    });
};
var nChooseK = function (dictMonad) {
    return function (k) {
        return function (arr) {
            var $261 = k === 0;
            if ($261) {
                return Prelude.pure(applicativeGenT(dictMonad))([  ]);
            };
            if (!$261) {
                var $262 = Data_Array.length(arr) === 0;
                if ($262) {
                    return Data_Monoid.mempty(monoidGenT(dictMonad));
                };
                if (!$262) {
                    var tl = Data_Array.drop(1)(arr);
                    var hd = Data_Array.singleton(arr[0]);
                    return Prelude["<>"](semigroupGenT(dictMonad))(Prelude["<$>"](functorGenT(dictMonad))(Prelude["<>"](Prelude.semigroupArray)(hd))(nChooseK(dictMonad)(k - 1)(tl)))(nChooseK(dictMonad)(k)(tl));
                };
                throw new Error("Failed pattern match: " + [ $262.constructor.name ]);
            };
            throw new Error("Failed pattern match: " + [ $261.constructor.name ]);
        };
    };
};
var nChooseKL = function (dictMonad) {
    return function (v) {
        return function (v1) {
            if (v === 0) {
                return Prelude.pure(applicativeGenT(dictMonad))(Data_List.Nil.value);
            };
            if (v1 instanceof Data_List.Nil) {
                return Data_Monoid.mempty(monoidGenT(dictMonad));
            };
            if (v1 instanceof Data_List.Cons) {
                return Prelude["<>"](semigroupGenT(dictMonad))(Prelude["<$>"](functorGenT(dictMonad))(Prelude["<>"](Data_List.semigroupList)(Data_List.singleton(v1.value0)))(nChooseKL(dictMonad)(v - 1)(v1.value1)))(nChooseKL(dictMonad)(v)(v1.value1));
            };
            throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
var shuffleArray = function (dictMonad) {
    var shuffle0 = function (acc) {
        return function (v) {
            if (v.length === 0) {
                return Prelude.pure(applicativeGenT(dictMonad))(acc);
            };
            return Prelude.bind(bindGenT(dictMonad))(chooseInt(dictMonad)(0.0)(Data_Int.toNumber(Data_Array.length(v) - 1)))(function (v1) {
                var xs__ALT = Data_Maybe.fromMaybe(v)(Data_Array.deleteAt(v1)(v));
                var acc__ALT = Prelude["<>"](Prelude.semigroupArray)(acc)(Data_Maybe.maybe([  ])(Data_Array.singleton)(Data_Array["!!"](v)(v1)));
                return shuffle0(acc__ALT)(xs__ALT);
            });
        };
    };
    return shuffle0([  ]);
};
var suchThatMaybe = function (dictMonad) {
    return function (g) {
        return function (p) {
            var $$try = function (k) {
                return function (v) {
                    if (v === 0) {
                        return Prelude["return"](applicativeGenT(dictMonad))(Data_Maybe.Nothing.value);
                    };
                    return Prelude.bind(bindGenT(dictMonad))(resize(dictMonad)((2 * k | 0) + v | 0)(g))(function (v1) {
                        var $273 = p(v1);
                        if ($273) {
                            return Prelude["return"](applicativeGenT(dictMonad))(new Data_Maybe.Just(v1));
                        };
                        if (!$273) {
                            return $$try(k + 1 | 0)(v - 1);
                        };
                        throw new Error("Failed pattern match at Test.StrongCheck.Gen line 359, column 1 - line 360, column 1: " + [ $273.constructor.name ]);
                    });
                };
            };
            return sized(dictMonad)($$try(0));
        };
    };
};
var suchThat = function (dictMonad) {
    return function (g) {
        return function (p) {
            var next = function (n) {
                return resize(dictMonad)(n + 1 | 0)(suchThat(dictMonad)(g)(p));
            };
            return Prelude[">>="](bindGenT(dictMonad))(suchThatMaybe(dictMonad)(g)(p))(Data_Maybe.maybe(sized(dictMonad)(next))(Prelude["return"](applicativeGenT(dictMonad))));
        };
    };
};
var altGenT = function (dictMonad) {
    return new Control_Alt.Alt(function () {
        return functorGenT(dictMonad);
    }, function (v) {
        return function (v1) {
            return GenT.create(Control_Alt["<|>"](Data_Machine_Mealy.altMealy(dictMonad))(v.value0)(v1.value0));
        };
    });
};
var plusGenT = function (dictMonad) {
    return new Control_Plus.Plus(function () {
        return altGenT(dictMonad);
    }, Data_Monoid.mempty(monoidGenT(dictMonad)));
};
var alternativeGenT = function (dictMonad) {
    return new Control_Alternative.Alternative(function () {
        return plusGenT(dictMonad);
    }, function () {
        return applicativeGenT(dictMonad);
    });
};
var monadPlusGenT = function (dictMonad) {
    return new Control_MonadPlus.MonadPlus(function () {
        return alternativeGenT(dictMonad);
    }, function () {
        return monadGenT(dictMonad);
    });
};
var allInRange = function (dictMonad) {
    return function (min) {
        return function (max) {
            var go = function (cur) {
                return Data_Machine_Mealy.pureMealy(dictMonad["__superclass_Prelude.Applicative_0"]())(function (s) {
                    var $278 = cur > max;
                    if ($278) {
                        return Data_Machine_Mealy.Halt.value;
                    };
                    if (!$278) {
                        return new Data_Machine_Mealy.Emit(new GenOut({
                            state: s,
                            value: cur
                        }), go(cur + 1 | 0));
                    };
                    throw new Error("Failed pattern match at Test.StrongCheck.Gen line 369, column 1 - line 370, column 1: " + [ $278.constructor.name ]);
                });
            };
            return GenT.create(go(min));
        };
    };
};
var allInArray = function (dictMonad) {
    return function (a) {
        var go = function (i) {
            return Data_Machine_Mealy.pureMealy(dictMonad["__superclass_Prelude.Applicative_0"]())(function (s) {
                return Data_Maybe.maybe(Data_Machine_Mealy.Halt.value)(function (a1) {
                    return new Data_Machine_Mealy.Emit(new GenOut({
                        state: s,
                        value: a1
                    }), go(i + 1 | 0));
                })(Data_Array["!!"](a)(i));
            });
        };
        return GenT.create(go(0));
    };
};
var perms = function (dictMonad) {
    return function (arr) {
        var $279 = Data_Array.length(arr) === 0;
        if ($279) {
            return Prelude.pure(applicativeGenT(dictMonad))([  ]);
        };
        if (!$279) {
            var tl = Data_Array_Unsafe.tail(arr);
            var hd = Data_Array_Unsafe.head(arr);
            return Prelude.bind(bindGenT(dictMonad))(perms(dictMonad)(tl))(function (v) {
                var f = function (n) {
                    var suffix = Data_Array.drop(n)(v);
                    var prefix = Data_Array.take(n)(v);
                    return Prelude["<>"](Prelude.semigroupArray)(prefix)(Prelude["<>"](Prelude.semigroupArray)([ hd ])(suffix));
                };
                return allInArray(dictMonad)(Prelude["<$>"](Prelude.functorArray)(f)(Data_Array.range(0)(Data_Array.length(v))));
            });
        };
        throw new Error("Failed pattern match: " + [ $279.constructor.name ]);
    };
};
var shuffle$prime = function (dictMonad) {
    return function (n) {
        return function (g) {
            return Prelude.bind(bindGenT(dictMonad))(chunked(dictMonad)(n)(g))(function (v) {
                return Prelude.bind(bindGenT(dictMonad))(shuffleArray(dictMonad)(v))(function (v1) {
                    return allInArray(dictMonad)(v1);
                });
            });
        };
    };
};
var shuffle = function (dictMonad) {
    return shuffle$prime(dictMonad)(100);
};
module.exports = {
    GenOut: GenOut,
    GenState: GenState,
    GenT: GenT,
    wrapEffect: wrapEffect,
    vectorOf: vectorOf,
    variant: variant,
    updateSeedState: updateSeedState,
    unGenState: unGenState,
    unGenOut: unGenOut,
    unGen: unGen,
    uniform: uniform,
    transGen: transGen,
    toLazyList: toLazyList,
    takeGen: takeGen,
    suchThatMaybe: suchThatMaybe,
    suchThat: suchThat,
    stateful: stateful,
    sized: sized,
    shuffleArray: shuffleArray,
    "shuffle'": shuffle$prime,
    shuffle: shuffle,
    "showSample'": showSample$prime,
    showSample: showSample,
    "sample'": sample$prime,
    sample: sample,
    runGen: runGen,
    resize: resize,
    repeatable: repeatable,
    perturbGen: perturbGen,
    perms: perms,
    oneOf: oneOf,
    nChooseK: nChooseK,
    interleave: interleave,
    infinite: infinite,
    frequency: frequency,
    "foldGen'": foldGen$prime,
    foldGen: foldGen,
    extend: extend,
    elements: elements,
    dropGen: dropGen,
    collectAll: collectAll,
    chunked: chunked,
    chooseInt: chooseInt,
    choose: choose,
    charGen: charGen,
    arrayOf1: arrayOf1,
    arrayOf: arrayOf,
    applyGen: applyGen,
    allInRange: allInRange,
    allInArray: allInArray,
    semigroupGenState: semigroupGenState,
    monoidGenState: monoidGenState,
    semigroupGenOut: semigroupGenOut,
    monoidGenOut: monoidGenOut,
    functorGenOut: functorGenOut,
    applyGenOut: applyGenOut,
    functorGenT: functorGenT,
    applyGenT: applyGenT,
    applicativeGenT: applicativeGenT,
    semigroupGenT: semigroupGenT,
    monoidGenT: monoidGenT,
    bindGenT: bindGenT,
    monadGenT: monadGenT,
    altGenT: altGenT,
    plusGenT: plusGenT,
    alternativeGenT: alternativeGenT,
    monadPlusGenT: monadPlusGenT,
    lazyGenT: lazyGenT
};
