// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
var Control_Alternative = require("Control.Alternative");
var Control_MonadPlus = require("Control.MonadPlus");
var Control_Plus = require("Control.Plus");
var Data_Foldable = require("Data.Foldable");
var Data_Lazy = require("Data.Lazy");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");
var Data_Monoid_Additive = require("Data.Monoid.Additive");
var Data_Profunctor_Strong = require("Data.Profunctor.Strong");
var Data_Traversable = require("Data.Traversable");
var Data_Tuple = require("Data.Tuple");
var Data_Unfoldable = require("Data.Unfoldable");
var Unsafe_Coerce = require("Unsafe.Coerce");
var Data_Sequence_Internal = require("Data.Sequence.Internal");
var Data_FingerTree = require("Data.FingerTree");
var Data_Sequence_Ordered = require("Data.Sequence.Ordered");
var Seq = function (x) {
    return x;
};
var unsnoc = function (v) {
    var $40 = Data_FingerTree.viewR(Data_Monoid_Additive.monoidAdditive(Prelude.semiringInt))(Data_Sequence_Internal.measuredElem)(v);
    if ($40 instanceof Data_FingerTree.NilR) {
        return Data_Maybe.Nothing.value;
    };
    if ($40 instanceof Data_FingerTree.SnocR) {
        return new Data_Maybe.Just(new Data_Tuple.Tuple(Data_Lazy.force($40.value0), Data_Sequence_Internal.getElem($40.value1)));
    };
    throw new Error("Failed pattern match at Data.Sequence line 205, column 1 - line 206, column 1: " + [ $40.constructor.name ]);
};
var unsafeIndex = function (i) {
    return function (v) {
        var $45 = Data_FingerTree.unsafeSplitTree(Data_Monoid_Additive.monoidAdditive(Prelude.semiringInt))(Data_Sequence_Internal.measuredElem)(function (n) {
            return i < Data_Monoid_Additive.runAdditive(n);
        })(0)(v);
        return Data_Sequence_Internal.getElem($45.value1);
    };
};
var unsafeAdjust = function (f) {
    return function (i) {
        return function (v) {
            var $52 = Data_FingerTree.unsafeSplitTree(Data_Monoid_Additive.monoidAdditive(Prelude.semiringInt))(Data_Sequence_Internal.measuredElem)(function (n) {
                return i < Data_Monoid_Additive.runAdditive(n);
            })(0)(v);
            var g = Unsafe_Coerce.unsafeCoerce(f);
            var l__ALT = Data_FingerTree.snoc(Data_Monoid_Additive.monoidAdditive(Prelude.semiringInt))(Data_Sequence_Internal.measuredElem)(Data_Lazy.force($52.value0))(g($52.value1));
            return Data_FingerTree.append(Data_Monoid_Additive.monoidAdditive(Prelude.semiringInt))(Data_Sequence_Internal.measuredElem)(l__ALT)(Data_Lazy.force($52.value2));
        };
    };
};
var uncons = function (v) {
    var $57 = Data_FingerTree.viewL(Data_Monoid_Additive.monoidAdditive(Prelude.semiringInt))(Data_Sequence_Internal.measuredElem)(v);
    if ($57 instanceof Data_FingerTree.NilL) {
        return Data_Maybe.Nothing.value;
    };
    if ($57 instanceof Data_FingerTree.ConsL) {
        return new Data_Maybe.Just(new Data_Tuple.Tuple(Data_Sequence_Internal.getElem($57.value0), Data_Lazy.force($57.value1)));
    };
    throw new Error("Failed pattern match at Data.Sequence line 196, column 1 - line 197, column 1: " + [ $57.constructor.name ]);
};
var splitAt$prime = function (i) {
    return function (v) {
        var tuple = Data_FingerTree.split(Data_Monoid_Additive.monoidAdditive(Prelude.semiringInt))(Data_Sequence_Internal.measuredElem)(function (n) {
            return i < Data_Monoid_Additive.runAdditive(n);
        })(v);
        var seqify = function (dictFunctor) {
            return Unsafe_Coerce.unsafeCoerce;
        };
        return seqify(Data_Lazy.functorLazy)(tuple);
    };
};
var take = function (i) {
    return function ($100) {
        return Data_Lazy.force(Data_Tuple.fst(splitAt$prime(i)($100)));
    };
};
var splitAt = function (i) {
    return function (xs) {
        var tuple = splitAt$prime(i)(xs);
        var forceBoth = Data_Profunctor_Strong["***"](Prelude.categoryFn)(Data_Profunctor_Strong.strongFn)(Data_Lazy.force)(Data_Lazy.force);
        return forceBoth(tuple);
    };
};
var snoc = function (v) {
    return function (x) {
        return Data_FingerTree.snoc(Data_Monoid_Additive.monoidAdditive(Prelude.semiringInt))(Data_Sequence_Internal.measuredElem)(v)(x);
    };
};
var $$null = function (v) {
    if (v instanceof Data_FingerTree.Empty) {
        return true;
    };
    return false;
};
var mapSeq = function (dictFunctor) {
    return Unsafe_Coerce.unsafeCoerce;
};
var tail = function (v) {
    return mapSeq(Data_Maybe.functorMaybe)(Data_FingerTree.tail(Data_Monoid_Additive.monoidAdditive(Prelude.semiringInt))(Data_Sequence_Internal.measuredElem)(v));
};
var map = function (f) {
    return function (v) {
        var g = Unsafe_Coerce.unsafeCoerce(f);
        return Prelude["<$>"](Data_FingerTree.functorFingerTree)(g)(v);
    };
};
var length = function (v) {
    return Data_Monoid_Additive.runAdditive(Data_Sequence_Internal.measure(Data_FingerTree.measuredFingerTree(Data_Monoid_Additive.monoidAdditive(Prelude.semiringInt))(Data_Sequence_Internal.measuredElem))(v));
};
var last = function (v) {
    return Data_Sequence_Internal.mapGetElem(Data_Maybe.functorMaybe)(Data_FingerTree.last(Data_Monoid_Additive.monoidAdditive(Prelude.semiringInt))(Data_Sequence_Internal.measuredElem)(v));
};
var init = function (v) {
    return mapSeq(Data_Maybe.functorMaybe)(Data_FingerTree.init(Data_Monoid_Additive.monoidAdditive(Prelude.semiringInt))(Data_Sequence_Internal.measuredElem)(v));
};
var inBounds = function (i) {
    return function (seq) {
        return 0 <= i && i < length(seq);
    };
};
var index = function (i) {
    return function (xs) {
        var $71 = inBounds(i)(xs);
        if ($71) {
            return new Data_Maybe.Just(unsafeIndex(i)(xs));
        };
        if (!$71) {
            return Data_Maybe.Nothing.value;
        };
        throw new Error("Failed pattern match at Data.Sequence line 248, column 1 - line 249, column 1: " + [ $71.constructor.name ]);
    };
};
var head = function (v) {
    return Data_Sequence_Internal.mapGetElem(Data_Maybe.functorMaybe)(Data_FingerTree.head(Data_Monoid_Additive.monoidAdditive(Prelude.semiringInt))(Data_Sequence_Internal.measuredElem)(v));
};
var functorSeq = new Prelude.Functor(map);
var fullyForce = function (v) {
    return Data_FingerTree.fullyForce(v);
};
var fromSeq = function (dictFunctor) {
    return function (dictUnfoldable) {
        return function (v) {
            return Data_Sequence_Internal.mapGetElem(dictFunctor)(Data_FingerTree.unfoldLeft(dictUnfoldable)(Data_Monoid_Additive.monoidAdditive(Prelude.semiringInt))(Data_Sequence_Internal.measuredElem)(v));
        };
    };
};
var showSeq = function (dictShow) {
    return new Prelude.Show(function (xs) {
        return "(toSeq [" + (Data_Sequence_Internal.strJoin(dictShow)(",")(fromSeq(Prelude.functorArray)(Data_Unfoldable.unfoldableArray)(xs)) + "])");
    });
};
var foldableSeq = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return Data_Foldable.foldMap(Data_FingerTree.foldableFingerTree)(dictMonoid)(Data_Sequence_Internal.liftElem(f))(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return Data_Foldable.foldl(Data_FingerTree.foldableFingerTree)(Data_Sequence_Internal.lift2Elem(f))(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return Data_Foldable.foldr(Data_FingerTree.foldableFingerTree)(Data_Sequence_Internal.liftElem(f))(z)(v);
        };
    };
});
var traversableSeq = new Data_Traversable.Traversable(function () {
    return foldableSeq;
}, function () {
    return functorSeq;
}, function (dictApplicative) {
    return Data_Traversable.traverse(traversableSeq)(dictApplicative)(Prelude.id(Prelude.categoryFn));
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return mapSeq((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Traversable.traverse(Data_FingerTree.traversableFingerTree)(dictApplicative)(Data_Traversable.traverse(Data_Sequence_Internal.traversableElem)(dictApplicative)(f))(v));
        };
    };
});
var filter = function (p) {
    return function (v) {
        var q = Unsafe_Coerce.unsafeCoerce(p);
        return Data_FingerTree.filter(Data_Monoid_Additive.monoidAdditive(Prelude.semiringInt))(Data_Sequence_Internal.measuredElem)(q)(v);
    };
};
var eqSeq = function (dictEq) {
    return new Prelude.Eq(function (v) {
        return function (v1) {
            return Data_FingerTree.eqFingerTree(Data_Monoid_Additive.monoidAdditive(Prelude.semiringInt))(Data_Sequence_Internal.measuredElem)(Data_Sequence_Internal.eqElem(dictEq))(v)(v1);
        };
    });
};
var ordSeq = function (dictOrd) {
    return new Prelude.Ord(function () {
        return eqSeq(dictOrd["__superclass_Prelude.Eq_0"]());
    }, function (v) {
        return function (v1) {
            return Data_FingerTree.compareFingerTree(Data_Monoid_Additive.monoidAdditive(Prelude.semiringInt))(Data_Sequence_Internal.measuredElem)(Data_Sequence_Internal.ordElem(dictOrd))(v)(v1);
        };
    });
};
var empty = Data_FingerTree.Empty.value;
var drop = function (i) {
    return function ($101) {
        return Data_Lazy.force(Data_Tuple.snd(splitAt$prime(i)($101)));
    };
};
var cons = function (x) {
    return function (v) {
        return Data_FingerTree.cons(Data_Monoid_Additive.monoidAdditive(Prelude.semiringInt))(Data_Sequence_Internal.measuredElem)(x)(v);
    };
};
var singleton = function (x) {
    return cons(x)(empty);
};
var toSeq = function (dictFoldable) {
    return Data_Foldable.foldr(dictFoldable)(cons)(empty);
};
var unfoldableSeq = new Data_Unfoldable.Unfoldable(function (f) {
    return function (xs) {
        var $93 = f(xs);
        if ($93 instanceof Data_Maybe.Just) {
            return cons($93.value0.value0)(Data_Unfoldable.unfoldr(unfoldableSeq)(f)($93.value0.value1));
        };
        if ($93 instanceof Data_Maybe.Nothing) {
            return empty;
        };
        throw new Error("Failed pattern match: " + [ $93.constructor.name ]);
    };
});
var sort = function (dictOrd) {
    return Data_Sequence_Ordered.sort(functorSeq)(foldableSeq)(unfoldableSeq)(dictOrd);
};
var append = function (v) {
    return function (v1) {
        return Data_FingerTree.append(Data_Monoid_Additive.monoidAdditive(Prelude.semiringInt))(Data_Sequence_Internal.measuredElem)(v)(v1);
    };
};
var concat = Data_Foldable.foldr(foldableSeq)(append)(empty);
var concatMap = function (f) {
    return function ($102) {
        return concat(map(f)($102));
    };
};
var monadSeq = new Prelude.Monad(function () {
    return applicativeSeq;
}, function () {
    return bindSeq;
});
var bindSeq = new Prelude.Bind(function () {
    return applySeq;
}, Prelude.flip(concatMap));
var applySeq = new Prelude.Apply(function () {
    return functorSeq;
}, Prelude.ap(monadSeq));
var applicativeSeq = new Prelude.Applicative(function () {
    return applySeq;
}, singleton);
var semigroupSeq = new Prelude.Semigroup(append);
var monoidSeq = new Data_Monoid.Monoid(function () {
    return semigroupSeq;
}, empty);
var altSeq = new Control_Alt.Alt(function () {
    return functorSeq;
}, append);
var plusSeq = new Control_Plus.Plus(function () {
    return altSeq;
}, empty);
var alternativeSeq = new Control_Alternative.Alternative(function () {
    return plusSeq;
}, function () {
    return applicativeSeq;
});
var monadPlusSeq = new Control_MonadPlus.MonadPlus(function () {
    return alternativeSeq;
}, function () {
    return monadSeq;
});
var adjust = function (f) {
    return function (i) {
        return function (xs) {
            var $99 = inBounds(i)(xs);
            if ($99) {
                return unsafeAdjust(f)(i)(xs);
            };
            if (!$99) {
                return xs;
            };
            throw new Error("Failed pattern match at Data.Sequence line 262, column 1 - line 263, column 1: " + [ $99.constructor.name ]);
        };
    };
};
var replace = function (x) {
    return adjust(Prelude["const"](x));
};
module.exports = {
    fullyForce: fullyForce,
    fromSeq: fromSeq,
    replace: replace,
    adjust: adjust,
    index: index,
    sort: sort,
    filter: filter,
    drop: drop,
    take: take,
    splitAt: splitAt,
    last: last,
    init: init,
    tail: tail,
    head: head,
    unsnoc: unsnoc,
    uncons: uncons,
    inBounds: inBounds,
    "null": $$null,
    length: length,
    toSeq: toSeq,
    concatMap: concatMap,
    concat: concat,
    map: map,
    append: append,
    snoc: snoc,
    cons: cons,
    singleton: singleton,
    empty: empty,
    ordSeq: ordSeq,
    eqSeq: eqSeq,
    showSeq: showSeq,
    semigroupSeq: semigroupSeq,
    monoidSeq: monoidSeq,
    foldableSeq: foldableSeq,
    traversableSeq: traversableSeq,
    unfoldableSeq: unfoldableSeq,
    functorSeq: functorSeq,
    applySeq: applySeq,
    applicativeSeq: applicativeSeq,
    bindSeq: bindSeq,
    monadSeq: monadSeq,
    altSeq: altSeq,
    plusSeq: plusSeq,
    alternativeSeq: alternativeSeq,
    monadPlusSeq: monadPlusSeq
};
