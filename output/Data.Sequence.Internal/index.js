// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Data_Array_Unsafe = require("Data.Array.Unsafe");
var Data_Foldable = require("Data.Foldable");
var Data_Lazy = require("Data.Lazy");
var Data_Monoid = require("Data.Monoid");
var Data_Monoid_Additive = require("Data.Monoid.Additive");
var Data_Traversable = require("Data.Traversable");
var Unsafe_Coerce = require("Unsafe.Coerce");
var NoKey = (function () {
    function NoKey() {

    };
    NoKey.value = new NoKey();
    return NoKey;
})();
var Key = (function () {
    function Key(value0) {
        this.value0 = value0;
    };
    Key.create = function (value0) {
        return new Key(value0);
    };
    return Key;
})();
var Elem = function (x) {
    return x;
};
var Measured = function (measure) {
    this.measure = measure;
};
var $less$dollar$dollar$greater = function (dictFunctor) {
    return function (dictFunctor1) {
        return function ($71) {
            return Prelude["<$>"](dictFunctor)(Prelude["<$>"](dictFunctor1)($71));
        };
    };
};
var $less$dollar$dollar$dollar$greater = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictFunctor2) {
            return function ($72) {
                return $less$dollar$dollar$greater(dictFunctor)(dictFunctor1)(Prelude["<$>"](dictFunctor2)($72));
            };
        };
    };
};
var $bang = Data_Array_Unsafe.unsafeIndex;
var strJoin = function (dictShow) {
    return function (glue) {
        return function ($73) {
            return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(glue)(Prelude.map(Prelude.functorArray)(Prelude.show(dictShow))($73));
        };
    };
};
var showKey = function (dictShow) {
    return new Prelude.Show(function (v) {
        if (v instanceof Key) {
            return "(Key " + (Prelude.show(dictShow)(v.value0) + ")");
        };
        if (v instanceof NoKey) {
            return "NoKey";
        };
        throw new Error("Failed pattern match at Data.Sequence.Internal line 107, column 1 - line 111, column 1: " + [ v.constructor.name ]);
    });
};
var semigroupKey = new Prelude.Semigroup(function (k) {
    return function (v) {
        if (v instanceof NoKey) {
            return k;
        };
        return v;
    };
});
var monoidKey = new Data_Monoid.Monoid(function () {
    return semigroupKey;
}, NoKey.value);
var measuredElemKey = new Measured(function (v) {
    return new Key(v);
});
var measuredElem = new Measured(function (v) {
    return 1;
});
var measure = function (dict) {
    return dict.measure;
};
var measuredArray = function (dictMonoid) {
    return function (dictMeasured) {
        return new Measured(function (xs) {
            return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (i) {
                return function (a) {
                    return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(i)(measure(dictMeasured)(a));
                };
            })(Data_Monoid.mempty(dictMonoid))(xs);
        });
    };
};
var measuredLazy = function (dictMonoid) {
    return function (dictMeasured) {
        return new Measured(function (s) {
            return measure(dictMeasured)(Data_Lazy.force(s));
        });
    };
};
var mapGetElem = function (dictFunctor) {
    return Unsafe_Coerce.unsafeCoerce;
};
var mapElem = function (dictFunctor) {
    return Unsafe_Coerce.unsafeCoerce;
};
var liftElem = Unsafe_Coerce.unsafeCoerce;
var lift2Elem = Unsafe_Coerce.unsafeCoerce;
var getElem = function (v) {
    return v;
};
var showElem = function (dictShow) {
    return new Prelude.Show(function (x) {
        return "Elem (" + (Prelude.show(dictShow)(getElem(x)) + ")");
    });
};
var functorElem = new Prelude.Functor(function (f) {
    return function (v) {
        return f(v);
    };
});
var foldableElem = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var traversableElem = new Data_Traversable.Traversable(function () {
    return foldableElem;
}, function () {
    return functorElem;
}, function (dictApplicative) {
    return function (v) {
        return mapElem((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return mapElem((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(f(v));
        };
    };
});
var eqKey = function (dictEq) {
    return new Prelude.Eq(function (v) {
        return function (v1) {
            if (v instanceof Key && v1 instanceof Key) {
                return Prelude["=="](dictEq)(v.value0)(v1.value0);
            };
            if (v instanceof NoKey && v1 instanceof NoKey) {
                return true;
            };
            return false;
        };
    });
};
var ordKey = function (dictOrd) {
    return new Prelude.Ord(function () {
        return eqKey(dictOrd["__superclass_Prelude.Eq_0"]());
    }, function (v) {
        return function (v1) {
            if (v instanceof NoKey) {
                return Prelude.LT.value;
            };
            if (v1 instanceof NoKey) {
                return Prelude.GT.value;
            };
            if (v instanceof Key && v1 instanceof Key) {
                return Prelude.compare(dictOrd)(v.value0)(v1.value0);
            };
            throw new Error("Failed pattern match at Data.Sequence.Internal line 115, column 1 - line 120, column 1: " + [ v.constructor.name, v1.constructor.name ]);
        };
    });
};
var eqElem = function (dictEq) {
    return new Prelude.Eq(function (v) {
        return function (v1) {
            return Prelude["=="](dictEq)(v)(v1);
        };
    });
};
var ordElem = function (dictOrd) {
    return new Prelude.Ord(function () {
        return eqElem(dictOrd["__superclass_Prelude.Eq_0"]());
    }, function (v) {
        return function (v1) {
            return Prelude.compare(dictOrd)(v)(v1);
        };
    });
};
module.exports = {
    NoKey: NoKey, 
    Key: Key, 
    Elem: Elem, 
    Measured: Measured, 
    liftElem: liftElem, 
    lift2Elem: lift2Elem, 
    mapGetElem: mapGetElem, 
    mapElem: mapElem, 
    getElem: getElem, 
    measure: measure, 
    strJoin: strJoin, 
    "<$$$>": $less$dollar$dollar$dollar$greater, 
    "<$$>": $less$dollar$dollar$greater, 
    "!": $bang, 
    measuredArray: measuredArray, 
    measuredLazy: measuredLazy, 
    measuredElem: measuredElem, 
    showElem: showElem, 
    eqElem: eqElem, 
    ordElem: ordElem, 
    foldableElem: foldableElem, 
    functorElem: functorElem, 
    traversableElem: traversableElem, 
    eqKey: eqKey, 
    showKey: showKey, 
    semigroupKey: semigroupKey, 
    ordKey: ordKey, 
    monoidKey: monoidKey, 
    measuredElemKey: measuredElemKey
};
