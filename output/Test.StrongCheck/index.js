// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Control_Monad_Eff_Console = require("Control.Monad.Eff.Console");
var Control_Monad_Eff_Random = require("Control.Monad.Eff.Random");
var Control_Monad_Eff_Exception = require("Control.Monad.Eff.Exception");
var Control_Monad_Trampoline = require("Control.Monad.Trampoline");
var Data_Foldable = require("Data.Foldable");
var Data_Tuple = require("Data.Tuple");
var Data_Int = require("Data.Int");
var Data_Either = require("Data.Either");
var Data_List = require("Data.List");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");
var Data_Enum = require("Data.Enum");
var Data_Traversable = require("Data.Traversable");
var $$Math = require("Math");
var Data_Char = require("Data.Char");
var Data_Array_Unsafe = require("Data.Array.Unsafe");
var Data_String = require("Data.String");
var Data_Array = require("Data.Array");
var Data_Maybe_Unsafe = require("Data.Maybe.Unsafe");
var Test_StrongCheck_Gen = require("Test.StrongCheck.Gen");
var Control_Monad_Free = require("Control.Monad.Free");
var Data_Unfoldable = require("Data.Unfoldable");
var Signum = function (x) {
    return x;
};
var Success = (function () {
    function Success() {

    };
    Success.value = new Success();
    return Success;
})();
var Failed = (function () {
    function Failed(value0) {
        this.value0 = value0;
    };
    Failed.create = function (value0) {
        return new Failed(value0);
    };
    return Failed;
})();
var Positive = function (x) {
    return x;
};
var NonZero = function (x) {
    return x;
};
var Negative = function (x) {
    return x;
};
var ArbEnum = function (x) {
    return x;
};
var AlphaNumString = function (x) {
    return x;
};
var Arbitrary = function (arbitrary) {
    this.arbitrary = arbitrary;
};
var CoArbitrary = function (coarbitrary) {
    this.coarbitrary = coarbitrary;
};
var Testable = function (test) {
    this.test = test;
};
var $less$qmark$greater = function (v) {
    if (v) {
        return Prelude["const"](Success.value);
    };
    if (!v) {
        return Failed.create;
    };
    throw new Error("Failed pattern match at Test.StrongCheck line 88, column 1 - line 89, column 1: " + [ v.constructor.name ]);
};
var $eq$eq$eq = function (dictEq) {
    return function (dictShow) {
        return function (a) {
            return function (b) {
                var msg = Prelude.show(dictShow)(a) + (" /= " + Prelude.show(dictShow)(b));
                return $less$qmark$greater(Prelude["=="](dictEq)(a)(b))(msg);
            };
        };
    };
};
var $div$eq$eq = function (dictEq) {
    return function (dictShow) {
        return function (a) {
            return function (b) {
                var msg = Prelude.show(dictShow)(a) + (" == " + Prelude.show(dictShow)(b));
                return $less$qmark$greater(Prelude["/="](dictEq)(a)(b))(msg);
            };
        };
    };
};
var throwOnFirstFailure = function (dictFoldable) {
    return function (n) {
        return function (fr) {
            var throwOnFirstFailure__ALT = function (n1) {
                return function (v) {
                    if (v instanceof Data_List.Nil) {
                        return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
                    };
                    if (v instanceof Data_List.Cons && v.value0 instanceof Failed) {
                        return Control_Monad_Eff_Exception.throwException(Control_Monad_Eff_Exception.error("Test " + (Prelude.show(Prelude.showInt)(n1) + (" failed: \n" + v.value0.value0))));
                    };
                    if (v instanceof Data_List.Cons) {
                        return throwOnFirstFailure(Data_List.foldableList)(n1 + 1 | 0)(v.value1);
                    };
                    throw new Error("Failed pattern match at Test.StrongCheck line 174, column 3 - line 175, column 3: " + [ n1.constructor.name, v.constructor.name ]);
                };
            };
            return throwOnFirstFailure__ALT(n)(Data_List.toList(dictFoldable)(fr));
        };
    };
};
var testableResult = new Testable(Prelude["return"](Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad)));
var testableBoolean = new Testable(function (v) {
    if (v) {
        return Prelude["return"](Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))(Success.value);
    };
    if (!v) {
        return Prelude["return"](Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))(new Failed("Test returned false"));
    };
    throw new Error("Failed pattern match at Test.StrongCheck line 392, column 1 - line 396, column 1: " + [ v.constructor.name ]);
});
var test = function (dict) {
    return dict.test;
};
var showResult = new Prelude.Show(function (v) {
    if (v instanceof Success) {
        return "Success";
    };
    if (v instanceof Failed) {
        return "Failed: " + v.value0;
    };
    throw new Error("Failed pattern match at Test.StrongCheck line 213, column 1 - line 217, column 1: " + [ v.constructor.name ]);
});
var showArbEnum = function (dictShow) {
    return new Prelude.Show(function (v) {
        return "ArbEnum " + Prelude.show(dictShow)(v);
    });
};
var semigroupResult = new Prelude.Semigroup(function (v) {
    return function (v1) {
        if (v instanceof Success && v1 instanceof Success) {
            return Success.value;
        };
        if (v instanceof Failed && v1 instanceof Success) {
            return new Failed(v.value0);
        };
        if (v instanceof Success && v1 instanceof Failed) {
            return new Failed(v1.value0);
        };
        if (v instanceof Failed && v1 instanceof Failed) {
            return new Failed(v.value0 + ("\n" + v1.value0));
        };
        throw new Error("Failed pattern match at Test.StrongCheck line 217, column 1 - line 223, column 1: " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var runSignum = function (v) {
    return v;
};
var runPositive = function (v) {
    return v;
};
var runNonZero = function (v) {
    return v;
};
var runNegative = function (v) {
    return v;
};
var runArbEnum = function (v) {
    return v;
};
var runAlphaNumString = function (v) {
    return v;
};
var monoidResult = new Data_Monoid.Monoid(function () {
    return semigroupResult;
}, Success.value);
var maxNumber = 9.007199254740992e15;
var eqResult = new Prelude.Eq(function (v) {
    return function (v1) {
        if (v instanceof Success && v1 instanceof Success) {
            return true;
        };
        if (v instanceof Failed && v1 instanceof Failed) {
            return Prelude["=="](Prelude.eqString)(v.value0)(v1.value0);
        };
        return false;
    };
});
var eqArbEnum = function (dictEq) {
    return new Prelude.Eq(function (v) {
        return function (v1) {
            return Prelude["=="](dictEq)(v)(v1);
        };
    });
};
var ordArbEnum = function (dictOrd) {
    return new Prelude.Ord(function () {
        return eqArbEnum(dictOrd["__superclass_Prelude.Eq_0"]());
    }, function (v) {
        return function (v1) {
            return Prelude.compare(dictOrd)(v)(v1);
        };
    });
};
var defState = function (s) {
    return new Test_StrongCheck_Gen.GenState({
        seed: s,
        size: 10
    });
};
var quickCheckPure = function (dictTestable) {
    return function (n) {
        return function (s) {
            return function (prop) {
                return Control_Monad_Trampoline.runTrampoline(Test_StrongCheck_Gen["sample'"](Control_Monad_Free.freeMonad)(n)(defState(s))(test(dictTestable)(prop)));
            };
        };
    };
};
var smallCheckPure = function (dictTestable) {
    return function (s) {
        return function (prop) {
            return Control_Monad_Trampoline.runTrampoline(Test_StrongCheck_Gen.collectAll(Control_Monad_Free.freeMonad)(defState(s))(test(dictTestable)(prop)));
        };
    };
};
var countSuccesses = function (dictFoldable) {
    return function (fa) {
        var countSuccesses__ALT = function (__copy_acc) {
            return function (__copy_v) {
                var acc = __copy_acc;
                var v = __copy_v;
                tco: while (true) {
                    var acc1 = acc;
                    if (v instanceof Data_List.Nil) {
                        return acc1;
                    };
                    var acc1 = acc;
                    if (v instanceof Data_List.Cons && v.value0 instanceof Success) {
                        var __tco_acc = acc1 + 1 | 0;
                        var __tco_v = v.value1;
                        acc = __tco_acc;
                        v = __tco_v;
                        continue tco;
                    };
                    if (v instanceof Data_List.Cons) {
                        var __tco_acc = acc;
                        var __tco_v = v.value1;
                        acc = __tco_acc;
                        v = __tco_v;
                        continue tco;
                    };
                    throw new Error("Failed pattern match at Test.StrongCheck line 180, column 1 - line 181, column 1: " + [ acc.constructor.name, v.constructor.name ]);
                };
            };
        };
        return countSuccesses__ALT(0)(Data_List.toList(dictFoldable)(fa));
    };
};
var statCheckPure = function (dictTestable) {
    return function (s) {
        return function (freq) {
            return function (prop) {
                var $$try = function (__copy_x) {
                    var x = __copy_x;
                    tco: while (true) {
                        var measure = function (n) {
                            var results = quickCheckPure(dictTestable)(n)(s)(prop);
                            return Data_Int.toNumber(countSuccesses(Data_Foldable.foldableArray)(results) / Data_Array.length(results) | 0);
                        };
                        var measure__ALT = function (v) {
                            if (v === 0) {
                                return [  ];
                            };
                            return Prelude["<>"](Prelude.semigroupArray)(measure__ALT(v - 1))([ measure(v * x | 0) ]);
                        };
                        var freqs = measure__ALT(4);
                        var dists = Prelude["<$>"](Prelude.functorArray)(function ($179) {
                            return $$Math.abs(freq - $179);
                        })(freqs);
                        var dirs = Data_Array.zipWith(function (a) {
                            return function (b) {
                                return a - b;
                            };
                        })(Prelude["<>"](Prelude.semigroupArray)([ 1.0 ])(dists))(dists);
                        var fails = Data_Array.length(Data_Array.filter(Prelude[">"](Prelude.ordNumber)(0.0))(dirs));
                        var succs = Data_Array.filter(Prelude["<="](Prelude.ordNumber)(0.0))(dirs);
                        var $135 = fails > 1;
                        if ($135) {
                            var $136 = x < 1000000;
                            if ($136) {
                                var __tco_x = x * 10 | 0;
                                x = __tco_x;
                                continue tco;
                            };
                            if (!$136) {
                                return Failed.create("Divergence of statistical test: freqs = " + (Prelude.show(Prelude.showArray(Prelude.showNumber))(freqs) + (", dists = " + (Prelude.show(Prelude.showArray(Prelude.showNumber))(dists) + (", dirs = " + (Prelude.show(Prelude.showArray(Prelude.showNumber))(dirs) + (", fails: " + Prelude.show(Prelude.showInt)(fails))))))));
                            };
                            throw new Error("Failed pattern match: " + [ $136.constructor.name ]);
                        };
                        if (!$135) {
                            return Data_Maybe.maybe(new Failed("Error!"))(function (l) {
                                var $137 = l > 0.5;
                                if ($137) {
                                    return Failed.create("Final convergence distance too low: " + Prelude.show(Prelude.showNumber)(l));
                                };
                                if (!$137) {
                                    return Success.value;
                                };
                                throw new Error("Failed pattern match: " + [ $137.constructor.name ]);
                            })(Data_Array.last(succs));
                        };
                        throw new Error("Failed pattern match at Test.StrongCheck line 118, column 1 - line 119, column 1: " + [ $135.constructor.name ]);
                    };
                };
                return $$try(100);
            };
        };
    };
};
var statCheck = function (dictTestable) {
    return function (freq) {
        return function (prop) {
            return function __do() {
                var v = Control_Monad_Eff_Random.random();
                return Control_Monad_Eff_Console.log(Prelude.show(showResult)(statCheckPure(dictTestable)(v)(freq)(prop)))();
            };
        };
    };
};
var coarbitrary = function (dict) {
    return dict.coarbitrary;
};
var coarbTuple = function (dictCoArbitrary) {
    return function (dictCoArbitrary1) {
        return new CoArbitrary(function (v) {
            return Prelude[">>>"](Prelude.semigroupoidFn)(coarbitrary(dictCoArbitrary)(v.value0))(coarbitrary(dictCoArbitrary1)(v.value1));
        });
    };
};
var coarbNumber = new CoArbitrary(Test_StrongCheck_Gen.perturbGen(Control_Monad_Free.freeMonad));
var coarbPositive = new CoArbitrary(function (v) {
    return coarbitrary(coarbNumber)(v);
});
var coarbNonZero = new CoArbitrary(function (v) {
    return coarbitrary(coarbNumber)(v);
});
var coarbNegative = new CoArbitrary(function (v) {
    return coarbitrary(coarbNumber)(v);
});
var coarbMaybe = function (dictCoArbitrary) {
    return new CoArbitrary(function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return Test_StrongCheck_Gen.perturbGen(Control_Monad_Free.freeMonad)(1.0);
        };
        if (v instanceof Data_Maybe.Just) {
            return coarbitrary(dictCoArbitrary)(v.value0);
        };
        throw new Error("Failed pattern match at Test.StrongCheck line 355, column 1 - line 359, column 1: " + [ v.constructor.name ]);
    });
};
var coarbInt = new CoArbitrary(function ($180) {
    return Test_StrongCheck_Gen.perturbGen(Control_Monad_Free.freeMonad)(Data_Int.toNumber($180));
});
var coarbSignum = new CoArbitrary(function (v) {
    return coarbitrary(coarbInt)(v);
});
var coarbEither = function (dictCoArbitrary) {
    return function (dictCoArbitrary1) {
        return new CoArbitrary(function (v) {
            if (v instanceof Data_Either.Left) {
                return coarbitrary(dictCoArbitrary)(v.value0);
            };
            if (v instanceof Data_Either.Right) {
                return coarbitrary(dictCoArbitrary1)(v.value0);
            };
            throw new Error("Failed pattern match at Test.StrongCheck line 346, column 1 - line 350, column 1: " + [ v.constructor.name ]);
        });
    };
};
var coarbChar = new CoArbitrary(function (c) {
    return coarbitrary(coarbInt)(Data_Char.toCharCode(c));
});
var coarbBoolean = new CoArbitrary(function (v) {
    if (v) {
        return Test_StrongCheck_Gen.perturbGen(Control_Monad_Free.freeMonad)(1.0);
    };
    if (!v) {
        return Test_StrongCheck_Gen.perturbGen(Control_Monad_Free.freeMonad)(2.0);
    };
    throw new Error("Failed pattern match at Test.StrongCheck line 306, column 1 - line 310, column 1: " + [ v.constructor.name ]);
});
var coarbArray = function (dictCoArbitrary) {
    return new CoArbitrary(function (arr) {
        var $152 = Data_Array.length(arr) === 0;
        if ($152) {
            return Prelude.id(Prelude.categoryFn);
        };
        if (!$152) {
            var xs = Data_Array_Unsafe.tail(arr);
            var x = Data_Array_Unsafe.head(arr);
            return function ($181) {
                return coarbitrary(coarbArray(dictCoArbitrary))(xs)(coarbitrary(dictCoArbitrary)(x)($181));
            };
        };
        throw new Error("Failed pattern match: " + [ $152.constructor.name ]);
    });
};
var coarbList = function (dictCoArbitrary) {
    return new CoArbitrary(function ($182) {
        return coarbitrary(coarbArray(dictCoArbitrary))(Data_List.fromList(Data_Unfoldable.unfoldableArray)($182));
    });
};
var coarbString = new CoArbitrary(function (s) {
    return coarbitrary(coarbArray(coarbMaybe(coarbInt)))(Prelude["<$>"](Prelude.functorArray)(Data_String.charCodeAt(0))(Data_String.split("")(s)));
});
var coarbArbEnum = function (dictEnum) {
    return new CoArbitrary(function (v) {
        return coarbitrary(coarbInt)(Data_Enum.fromEnum(dictEnum)(v));
    });
};
var coarbAlphaNumString = new CoArbitrary(function (v) {
    return coarbitrary(coarbString)(v);
});
var check = function (dictTestable) {
    return function (dictFoldable) {
        return function (f) {
            return function (prop) {
                return function __do() {
                    var v = Control_Monad_Eff_Random.random();
                    return (function () {
                        var results = f(v)(prop);
                        var successes = countSuccesses(dictFoldable)(results);
                        return function __do() {
                            Control_Monad_Eff_Console.log(Prelude.show(Prelude.showInt)(successes) + ("/" + (Prelude.show(Prelude.showInt)(Data_List.length(Data_List.toList(dictFoldable)(results))) + " test(s) passed.")))();
                            return throwOnFirstFailure(dictFoldable)(1)(results)();
                        };
                    })()();
                };
            };
        };
    };
};
var quickCheck$prime = function (dictTestable) {
    return function (n) {
        return function (prop) {
            return check(dictTestable)(Data_Foldable.foldableArray)(quickCheckPure(dictTestable)(n))(prop);
        };
    };
};
var quickCheck = function (dictTestable) {
    return function (prop) {
        return quickCheck$prime(dictTestable)(100)(prop);
    };
};
var smallCheck = function (dictTestable) {
    return function (prop) {
        return check(dictTestable)(Data_Foldable.foldableArray)(smallCheckPure(dictTestable))(prop);
    };
};
var cardPerturb1 = function (dictEnum) {
    return function (f) {
        return f(Data_Enum.cardinality(dictEnum));
    };
};
var boundedArbEnum = function (dictBounded) {
    return new Prelude.Bounded(Prelude.bottom(dictBounded), Prelude.top(dictBounded));
};
var assert = function (dictTestable) {
    return quickCheck$prime(dictTestable)(1);
};
var arbitrary = function (dict) {
    return dict.arbitrary;
};
var coarbFunction = function (dictArbitrary) {
    return function (dictCoArbitrary) {
        return new CoArbitrary(function (f) {
            return function (gen) {
                return Prelude.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(arbitrary(dictArbitrary))(function (v) {
                    return coarbitrary(dictCoArbitrary)(f(v))(gen);
                });
            };
        });
    };
};
var testableFunction = function (dictArbitrary) {
    return function (dictTestable) {
        return new Testable(function (f) {
            return Prelude.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(arbitrary(dictArbitrary))(function (v) {
                return test(dictTestable)(f(v));
            });
        });
    };
};
var arbTuple = function (dictArbitrary) {
    return function (dictArbitrary1) {
        return new Arbitrary(Prelude["<*>"](Test_StrongCheck_Gen.applyGenT(Control_Monad_Free.freeMonad))(Prelude["<$>"](Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(Data_Tuple.Tuple.create)(arbitrary(dictArbitrary)))(arbitrary(dictArbitrary1)));
    };
};
var arbPositive = new Arbitrary(Prelude["<$>"](Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(Prelude["<$>"](Prelude.functorFn)(Positive)(Prelude["*"](Prelude.semiringNumber)(maxNumber)))(Test_StrongCheck_Gen.uniform(Control_Monad_Free.freeMonad)));
var arbNumber = new Arbitrary(Test_StrongCheck_Gen.uniform(Control_Monad_Free.freeMonad));
var arbNegative = new Arbitrary(Prelude["<$>"](Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(Prelude["<$>"](Prelude.functorFn)(Negative)(Prelude["*"](Prelude.semiringNumber)(-maxNumber)))(Test_StrongCheck_Gen.uniform(Control_Monad_Free.freeMonad)));
var arbInt = new Arbitrary(Prelude.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(Test_StrongCheck_Gen.uniform(Control_Monad_Free.freeMonad))(function (v) {
    return Prelude.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))(Data_Maybe_Unsafe.fromJust(Data_Int.fromNumber($$Math.floor(Data_Int.toNumber((Prelude.top(Prelude.boundedInt) - Prelude.bottom(Prelude.boundedInt)) + Prelude.bottom(Prelude.boundedInt) | 0) * v))));
}));
var arbFunction = function (dictCoArbitrary) {
    return function (dictArbitrary) {
        return new Arbitrary(Test_StrongCheck_Gen.repeatable(function (a) {
            return coarbitrary(dictCoArbitrary)(a)(arbitrary(dictArbitrary));
        }));
    };
};
var arbEnumCardinality = function (dictEnum) {
    return function (f) {
        return f(Data_Enum.cardinality(dictEnum));
    };
};
var enumArbEnum = function (dictEnum) {
    return new Data_Enum.Enum(function () {
        return boundedArbEnum(dictEnum["__superclass_Prelude.Bounded_0"]());
    }, (function () {
        var f = function (v) {
            return v;
        };
        return arbEnumCardinality(dictEnum)(f);
    })(), function (v) {
        return Data_Enum.fromEnum(dictEnum)(v);
    }, function (v) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(ArbEnum)(Data_Enum.pred(dictEnum)(v));
    }, function (v) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(ArbEnum)(Data_Enum.succ(dictEnum)(v));
    }, function (v) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(ArbEnum)(Data_Enum.toEnum(dictEnum)(v));
    });
};
var arbChar = new Arbitrary(Test_StrongCheck_Gen.charGen(Control_Monad_Free.freeMonad));
var arbBoolean = new Arbitrary(Prelude.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(Test_StrongCheck_Gen.uniform(Control_Monad_Free.freeMonad))(function (v) {
    return Prelude["return"](Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))(v < 0.5);
}));
var arbEither = function (dictArbitrary) {
    return function (dictArbitrary1) {
        return new Arbitrary(Prelude.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(arbitrary(arbBoolean))(function (v) {
            if (v) {
                return Prelude["<$>"](Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(Data_Either.Left.create)(arbitrary(dictArbitrary));
            };
            if (!v) {
                return Prelude["<$>"](Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(Data_Either.Right.create)(arbitrary(dictArbitrary1));
            };
            throw new Error("Failed pattern match at Test.StrongCheck line 341, column 1 - line 346, column 1: " + [ v.constructor.name ]);
        }));
    };
};
var arbMaybe = function (dictArbitrary) {
    return new Arbitrary(Prelude.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(arbitrary(arbBoolean))(function (v) {
        if (v) {
            return Prelude.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))(Data_Maybe.Nothing.value);
        };
        if (!v) {
            return Prelude["<$>"](Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(Data_Maybe.Just.create)(arbitrary(dictArbitrary));
        };
        throw new Error("Failed pattern match at Test.StrongCheck line 350, column 1 - line 355, column 1: " + [ v.constructor.name ]);
    }));
};
var arbNonZero = new Arbitrary(Prelude.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(arbitrary(arbNumber))(function (v) {
    return Prelude.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(arbitrary(arbBoolean))(function (v1) {
        var sign = (function () {
            if (v1) {
                return 1.0;
            };
            if (!v1) {
                return -1.0;
            };
            throw new Error("Failed pattern match at Test.StrongCheck line 256, column 22 - line 257, column 18: " + [ v1.constructor.name ]);
        })();
        return Prelude["return"](Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))(v * maxNumber * sign);
    });
}));
var arbSignum = new Arbitrary(Prelude.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(arbitrary(arbBoolean))(function (v) {
    return Prelude["return"](Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))((function () {
        if (v) {
            return 1;
        };
        if (!v) {
            return -1;
        };
        throw new Error("Failed pattern match at Test.StrongCheck line 262, column 1 - line 266, column 1: " + [ v.constructor.name ]);
    })());
}));
var arbArray = function (dictArbitrary) {
    return new Arbitrary(Prelude.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(arbitrary(arbBoolean))(function (v) {
        if (v) {
            return Prelude["return"](Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))([  ]);
        };
        if (!v) {
            return Prelude.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(arbitrary(dictArbitrary))(function (v1) {
                return Prelude.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(arbitrary(arbArray(dictArbitrary)))(function (v2) {
                    return Prelude["return"](Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))(Prelude["<>"](Prelude.semigroupArray)([ v1 ])(v2));
                });
            });
        };
        throw new Error("Failed pattern match: " + [ v.constructor.name ]);
    }));
};
var arbList = function (dictArbitrary) {
    return new Arbitrary(Prelude["<$>"](Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(Data_List.toList(Data_Foldable.foldableArray))(arbitrary(arbArray(dictArbitrary))));
};
var arbString = new Arbitrary(Prelude["<$>"](Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(Data_String.fromCharArray)(arbitrary(arbArray(arbChar))));
var arbArbEnum = function (dictEnum) {
    return new Arbitrary((function () {
        var f = function (v) {
            return Prelude["<$>"](Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(function ($183) {
                return Data_Maybe_Unsafe.fromJust(Data_Enum.toEnum(dictEnum)($183));
            })(Test_StrongCheck_Gen.chooseInt(Control_Monad_Free.freeMonad)(0.0)(Data_Int.toNumber(v) - 1.0));
        };
        return Prelude["<$>"](Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(ArbEnum)(cardPerturb1(dictEnum)(f));
    })());
};
var arbAlphaNumString = new Arbitrary((function () {
    var lookup = function (x) {
        var index = Data_Maybe.fromMaybe(0)(Data_Int.fromNumber($$Math.round($$Math.min(Data_Int.toNumber(Data_String.length("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789") - 1))($$Math.floor(x * Data_Int.toNumber(Data_String.length("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789")))))));
        return Data_String.charAt(index)("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789");
    };
    return Prelude.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(arbitrary(arbArray(arbNumber)))(function (v) {
        return Prelude["return"](Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))(Data_Maybe_Unsafe.fromJust(Prelude["<$>"](Data_Maybe.functorMaybe)(function ($184) {
            return AlphaNumString(Data_String.fromCharArray($184));
        })(Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Prelude["<$>"](Prelude.functorArray)(lookup)(v)))));
    });
})());
module.exports = {
    Signum: Signum,
    Success: Success,
    Failed: Failed,
    Positive: Positive,
    NonZero: NonZero,
    Negative: Negative,
    ArbEnum: ArbEnum,
    AlphaNumString: AlphaNumString,
    Testable: Testable,
    CoArbitrary: CoArbitrary,
    Arbitrary: Arbitrary,
    test: test,
    statCheckPure: statCheckPure,
    statCheck: statCheck,
    smallCheckPure: smallCheckPure,
    smallCheck: smallCheck,
    runSignum: runSignum,
    runPositive: runPositive,
    runNonZero: runNonZero,
    runNegative: runNegative,
    runArbEnum: runArbEnum,
    runAlphaNumString: runAlphaNumString,
    quickCheckPure: quickCheckPure,
    "quickCheck'": quickCheck$prime,
    quickCheck: quickCheck,
    coarbitrary: coarbitrary,
    assert: assert,
    arbitrary: arbitrary,
    "/==": $div$eq$eq,
    "===": $eq$eq$eq,
    "<?>": $less$qmark$greater,
    eqResult: eqResult,
    showResult: showResult,
    semigroupResult: semigroupResult,
    monoidResult: monoidResult,
    arbNumber: arbNumber,
    arbInt: arbInt,
    coarbNumber: coarbNumber,
    coarbInt: coarbInt,
    arbPositive: arbPositive,
    coarbPositive: coarbPositive,
    arbNegative: arbNegative,
    coarbNegative: coarbNegative,
    arbNonZero: arbNonZero,
    coarbNonZero: coarbNonZero,
    arbSignum: arbSignum,
    coarbSignum: coarbSignum,
    arbArbEnum: arbArbEnum,
    coarbArbEnum: coarbArbEnum,
    eqArbEnum: eqArbEnum,
    ordArbEnum: ordArbEnum,
    showArbEnum: showArbEnum,
    boundedArbEnum: boundedArbEnum,
    enumArbEnum: enumArbEnum,
    arbBoolean: arbBoolean,
    coarbBoolean: coarbBoolean,
    arbChar: arbChar,
    coarbChar: coarbChar,
    arbString: arbString,
    coarbString: coarbString,
    arbAlphaNumString: arbAlphaNumString,
    coarbAlphaNumString: coarbAlphaNumString,
    arbTuple: arbTuple,
    coarbTuple: coarbTuple,
    arbEither: arbEither,
    coarbEither: coarbEither,
    arbMaybe: arbMaybe,
    coarbMaybe: coarbMaybe,
    arbFunction: arbFunction,
    coarbFunction: coarbFunction,
    arbArray: arbArray,
    coarbArray: coarbArray,
    arbList: arbList,
    coarbList: coarbList,
    testableResult: testableResult,
    testableBoolean: testableBoolean,
    testableFunction: testableFunction
};
