// Generated by psc version 0.8.0.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Control_Monad_Eff_Random = require("Control.Monad.Eff.Random");
var Control_Monad_State = require("Control.Monad.State");
var Control_Monad_State_Class = require("Control.Monad.State.Class");
var Control_Monad_Rec_Class = require("Control.Monad.Rec.Class");
var $$Math = require("Math");
var Data_Array = require("Data.Array");
var Data_Tuple = require("Data.Tuple");
var Data_Foldable = require("Data.Foldable");
var Data_Int = require("Data.Int");
var Data_Maybe = require("Data.Maybe");
var Data_Maybe_Unsafe = require("Data.Maybe.Unsafe");
var Data_Monoid_Additive = require("Data.Monoid.Additive");
var Data_Either = require("Data.Either");
var Data_List = require("Data.List");
var Test_QuickCheck_LCG = require("Test.QuickCheck.LCG");
var Control_Monad_State_Trans = require("Control.Monad.State.Trans");
var Data_Identity = require("Data.Identity");
var Data_Unfoldable = require("Data.Unfoldable");
var runGen = Control_Monad_State.runState;
var stateful = function (f) {
    return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (s) {
        return runGen(f(s))(s);
    });
};
var sized = function (f) {
    return stateful(function (s) {
        return f(s.size);
    });
};
var variant = function (n) {
    return function (g) {
        return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (s) {
            return runGen(g)((function () {
                var $11 = {};
                for (var $12 in s) {
                    if (s.hasOwnProperty($12)) {
                        $11[$12] = s[$12];
                    };
                };
                $11.newSeed = n;
                return $11;
            })());
        });
    };
};
var resize = function (sz) {
    return function (g) {
        return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (s) {
            return runGen(g)((function () {
                var $13 = {};
                for (var $14 in s) {
                    if (s.hasOwnProperty($14)) {
                        $13[$14] = s[$14];
                    };
                };
                $13.size = sz;
                return $13;
            })());
        });
    };
};
var replicateMRec = function (dictMonadRec) {
    return function (k) {
        return function (gen) {
            if (k <= 0) {
                return Prelude["return"]((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())(Data_List.Nil.value);
            };
            var go = function (v) {
                if (v.value1 === 0) {
                    return Prelude["return"]((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())(new Data_Either.Right(v.value0));
                };
                return Prelude["<#>"]((((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(gen)(function (x) {
                    return new Data_Either.Left(new Data_Tuple.Tuple(new Data_List.Cons(x, v.value0), v.value1 - 1));
                });
            };
            return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(new Data_Tuple.Tuple(Data_List.Nil.value, k));
        };
    };
};
var repeatable = function (f) {
    return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (s) {
        return new Data_Tuple.Tuple(function (a) {
            return Data_Tuple.fst(runGen(f(a))(s));
        }, (function () {
            var $22 = {};
            for (var $23 in s) {
                if (s.hasOwnProperty($23)) {
                    $22[$23] = s[$23];
                };
            };
            $22.newSeed = Test_QuickCheck_LCG.lcgNext(s.newSeed);
            return $22;
        })());
    });
};
var perturbGen = function (n) {
    return function (gen) {
        return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.modify(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (s) {
            var $24 = {};
            for (var $25 in s) {
                if (s.hasOwnProperty($25)) {
                    $24[$25] = s[$25];
                };
            };
            $24.newSeed = Test_QuickCheck_LCG.lcgPerturb(Data_Int.toNumber($foreign.float32ToInt32(n)))(s.newSeed);
            return $24;
        }))(function () {
            return gen;
        });
    };
};
var listOf = replicateMRec(Control_Monad_State_Trans.monadRecStateT(Control_Monad_Rec_Class.monadRecIdentity));
var vectorOf = function (k) {
    return function (g) {
        return Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(Data_List.fromList(Data_Unfoldable.unfoldableArray))(listOf(k)(g));
    };
};
var lcgStep = (function () {
    var f = function (s) {
        return new Data_Tuple.Tuple(Test_QuickCheck_LCG.runSeed(s.newSeed), (function () {
            var $26 = {};
            for (var $27 in s) {
                if (s.hasOwnProperty($27)) {
                    $26[$27] = s[$27];
                };
            };
            $26.newSeed = Test_QuickCheck_LCG.lcgNext(s.newSeed);
            return $26;
        })());
    };
    return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(f);
})();
var uniform = Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(function (n) {
    return Data_Int.toNumber(n) / Data_Int.toNumber(Test_QuickCheck_LCG.lcgN);
})(lcgStep);
var evalGen = Control_Monad_State.evalState;
var sample = function (seed) {
    return function (sz) {
        return function (g) {
            return evalGen(vectorOf(sz)(g))({
                newSeed: seed, 
                size: sz
            });
        };
    };
};
var randomSample$prime = function (n) {
    return function (g) {
        return function __do() {
            var v = Test_QuickCheck_LCG.randomSeed();
            return Prelude["return"](Control_Monad_Eff.applicativeEff)(sample(v)(n)(g))();
        };
    };
};
var randomSample = randomSample$prime(10);
var chooseInt = function (a) {
    return function (b) {
        var clamp = function (x) {
            var $29 = x % ((b - a) + 1 | 0);
            if ($29 >= 0) {
                return a + $29 | 0;
            };
            if (Prelude.otherwise) {
                return (b + $29 | 0) + 1 | 0;
            };
            throw new Error("Failed pattern match at Test.QuickCheck.Gen line 95, column 3 - line 96, column 3: " + [ $29.constructor.name ]);
        };
        return Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(clamp)(lcgStep);
    };
};
var elements = function (x) {
    return function (xs) {
        return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(chooseInt(0)(Data_Array.length(xs)))(function (v) {
            return Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))((function () {
                var $31 = v === 0;
                if ($31) {
                    return x;
                };
                if (!$31) {
                    return Data_Maybe.fromMaybe(x)(Data_Array["!!"](xs)(v - 1));
                };
                throw new Error("Failed pattern match at Test.QuickCheck.Gen line 151, column 1 - line 152, column 1: " + [ $31.constructor.name ]);
            })());
        });
    };
};
var oneOf = function (x) {
    return function (xs) {
        return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(chooseInt(0)(Data_Array.length(xs)))(function (v) {
            var $33 = v < 1;
            if ($33) {
                return x;
            };
            if (!$33) {
                return Data_Maybe.fromMaybe(x)(Data_Array["!!"](xs)(v - 1));
            };
            throw new Error("Failed pattern match at Test.QuickCheck.Gen line 102, column 1 - line 103, column 1: " + [ $33.constructor.name ]);
        });
    };
};
var choose = function (a) {
    return function (b) {
        var min = $$Math.min(a)(b);
        var max = $$Math.max(a)(b);
        return Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(Prelude[">>>"](Prelude.semigroupoidFn)(Prelude["*"](Prelude.semiringNumber)(max - min))(Prelude["+"](Prelude.semiringNumber)(min)))(uniform);
    };
};
var frequency = function (x) {
    return function (xs) {
        var xxs = new Data_List.Cons(x, xs);
        var total = Data_Monoid_Additive.runAdditive(Data_Foldable.fold(Data_List.foldableList)(Data_Monoid_Additive.monoidAdditive(Prelude.semiringNumber))(Prelude.map(Data_List.functorList)(function ($47) {
            return Data_Monoid_Additive.Additive(Data_Tuple.fst($47));
        })(xxs)));
        var pick = function (__copy_n) {
            return function (__copy_d) {
                return function (__copy_v) {
                    var n = __copy_n;
                    var d = __copy_d;
                    var v = __copy_v;
                    tco: while (true) {
                        var n1 = n;
                        var d1 = d;
                        if (v instanceof Data_List.Nil) {
                            return d1;
                        };
                        if (v instanceof Data_List.Cons) {
                            var $37 = n <= v.value0.value0;
                            if ($37) {
                                return v.value0.value1;
                            };
                            if (!$37) {
                                var __tco_n = n - v.value0.value0;
                                var __tco_d = d;
                                var __tco_v = v.value1;
                                n = __tco_n;
                                d = __tco_d;
                                v = __tco_v;
                                continue tco;
                            };
                            throw new Error("Failed pattern match at Test.QuickCheck.Gen line 109, column 1 - line 110, column 1: " + [ $37.constructor.name ]);
                        };
                        throw new Error("Failed pattern match at Test.QuickCheck.Gen line 109, column 1 - line 110, column 1: " + [ n.constructor.name, d.constructor.name, v.constructor.name ]);
                    };
                };
            };
        };
        return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(choose(0)(total))(function (v) {
            return pick(v)(Data_Tuple.snd(x))(xxs);
        });
    };
};
var arrayOf1 = function (g) {
    return sized(function (n) {
        return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(chooseInt(0)(n))(function (v) {
            return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(g)(function (v1) {
                return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(vectorOf(v - 1)(g))(function (v2) {
                    return Prelude["return"](Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new Data_Tuple.Tuple(v1, v2));
                });
            });
        });
    });
};
var arrayOf = function (g) {
    return sized(function (n) {
        return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(chooseInt(0)(n))(function (v) {
            return vectorOf(v)(g);
        });
    });
};
module.exports = {
    "randomSample'": randomSample$prime, 
    randomSample: randomSample, 
    sample: sample, 
    uniform: uniform, 
    perturbGen: perturbGen, 
    evalGen: evalGen, 
    runGen: runGen, 
    elements: elements, 
    vectorOf: vectorOf, 
    listOf: listOf, 
    arrayOf1: arrayOf1, 
    arrayOf: arrayOf, 
    frequency: frequency, 
    oneOf: oneOf, 
    chooseInt: chooseInt, 
    choose: choose, 
    resize: resize, 
    sized: sized, 
    variant: variant, 
    stateful: stateful, 
    repeatable: repeatable
};
